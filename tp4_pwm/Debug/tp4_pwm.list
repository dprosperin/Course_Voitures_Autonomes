
tp4_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a4  080041a4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a4  080041a4  000051a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ac  080041ac  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ac  080041ac  000051ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080041b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080041c0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080041c0  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120dd  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263d  00000000  00000000  00018119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  0001b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd3e  00000000  00000000  0001c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b2c  00000000  00000000  0003a11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c218a  00000000  00000000  0004dc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fdd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  0010fe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0011412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004144 	.word	0x08004144

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004144 	.word	0x08004144

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_GPIO_Init+0x74>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a16      	ldr	r2, [pc, #88]	@ (800057c <MX_GPIO_Init+0x74>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <MX_GPIO_Init+0x74>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_GPIO_Init+0x74>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <MX_GPIO_Init+0x74>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_GPIO_Init+0x74>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000554:	f000 fe7a 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_Pin;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000570:	f000 fcea 	bl	8000f48 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb88 	bl	8000c9e <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t reboot[7]={0xff,0xff,0x07,0x00,0x09,0x00,0x00};
 800058e:	4a1d      	ldr	r2, [pc, #116]	@ (8000604 <main+0x80>)
 8000590:	463b      	mov	r3, r7
 8000592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000596:	6018      	str	r0, [r3, #0]
 8000598:	3304      	adds	r3, #4
 800059a:	8019      	strh	r1, [r3, #0]
 800059c:	3302      	adds	r3, #2
 800059e:	0c0a      	lsrs	r2, r1, #16
 80005a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f833 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f7ff ffaf 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 faab 	bl	8000b04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005ae:	f000 f99f 	bl	80008f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	4814      	ldr	r0, [pc, #80]	@ (8000608 <main+0x84>)
 80005b6:	f001 feeb 	bl	8002390 <HAL_TIM_PWM_Start>
  PWM_write(&htim1, TIM_CHANNEL_1, 1);
 80005ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005be:	2100      	movs	r1, #0
 80005c0:	4811      	ldr	r0, [pc, #68]	@ (8000608 <main+0x84>)
 80005c2:	f000 f874 	bl	80006ae <PWM_write>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.25);
 80005c6:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80005ca:	2100      	movs	r1, #0
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <main+0x84>)
 80005ce:	f000 f86e 	bl	80006ae <PWM_write>
  PWM_dir(reculer);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 f8bc 	bl	8000750 <PWM_dir>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.25);
 80005d8:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80005dc:	2100      	movs	r1, #0
 80005de:	480a      	ldr	r0, [pc, #40]	@ (8000608 <main+0x84>)
 80005e0:	f000 f865 	bl	80006ae <PWM_write>
  PWM_dir_and_cycle(avancer,&htim1, TIM_CHANNEL_1, 1);
 80005e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005e8:	2200      	movs	r2, #0
 80005ea:	4907      	ldr	r1, [pc, #28]	@ (8000608 <main+0x84>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f8c1 	bl	8000774 <PWM_dir_and_cycle>
  PWM_dir_and_cycle(reculer,&htim1, TIM_CHANNEL_1, 0.25);
 80005f2:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80005f6:	2200      	movs	r2, #0
 80005f8:	4903      	ldr	r1, [pc, #12]	@ (8000608 <main+0x84>)
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f8ba 	bl	8000774 <PWM_dir_and_cycle>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x7c>
 8000604:	0800415c 	.word	0x0800415c
 8000608:	20000028 	.word	0x20000028

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2238      	movs	r2, #56	@ 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fd66 	bl	80040ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fe24 	bl	800127c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2340      	movs	r3, #64	@ 0x40
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800064e:	2355      	movs	r3, #85	@ 0x55
 8000650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f000 febe 	bl	80013e4 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800066e:	f000 f818 	bl	80006a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f9bc 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000696:	f000 f804 	bl	80006a2 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a6:	b672      	cpsid	i
}
 80006a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <Error_Handler+0x8>

080006ae <PWM_write>:
 */
#include "pwm_api.h"


void PWM_write(TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b087      	sub	sp, #28
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006c2:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e4:	ee17 3a90 	vmov	r3, s15
 80006e8:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d104      	bne.n	80006fa <PWM_write+0x4c>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80006f8:	e023      	b.n	8000742 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d104      	bne.n	800070a <PWM_write+0x5c>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000708:	e01b      	b.n	8000742 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2b08      	cmp	r3, #8
 800070e:	d104      	bne.n	800071a <PWM_write+0x6c>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000718:	e013      	b.n	8000742 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d104      	bne.n	800072a <PWM_write+0x7c>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000728:	e00b      	b.n	8000742 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b10      	cmp	r3, #16
 800072e:	d104      	bne.n	800073a <PWM_write+0x8c>
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8000738:	e003      	b.n	8000742 <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000742:	bf00      	nop
 8000744:	371c      	adds	r7, #28
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <PWM_dir>:
void PWM_dir(int dir)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	2140      	movs	r1, #64	@ 0x40
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <PWM_dir+0x20>)
 8000762:	f000 fd73 	bl	800124c <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	48000400 	.word	0x48000400

08000774 <PWM_dir_and_cycle>:
void PWM_dir_and_cycle(int dir,TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	ed87 0a00 	vstr	s0, [r7]
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	2140      	movs	r1, #64	@ 0x40
 800078c:	4824      	ldr	r0, [pc, #144]	@ (8000820 <PWM_dir_and_cycle+0xac>)
 800078e:	f000 fd5d 	bl	800124c <HAL_GPIO_WritePin>
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000798:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007a6:	edd7 7a00 	vldr	s15, [r7]
 80007aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ba:	ee17 3a90 	vmov	r3, s15
 80007be:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <PWM_dir_and_cycle+0x5c>
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80007ce:	e023      	b.n	8000818 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d104      	bne.n	80007e0 <PWM_dir_and_cycle+0x6c>
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80007de:	e01b      	b.n	8000818 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	d104      	bne.n	80007f0 <PWM_dir_and_cycle+0x7c>
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80007ee:	e013      	b.n	8000818 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b0c      	cmp	r3, #12
 80007f4:	d104      	bne.n	8000800 <PWM_dir_and_cycle+0x8c>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007fe:	e00b      	b.n	8000818 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b10      	cmp	r3, #16
 8000804:	d104      	bne.n	8000810 <PWM_dir_and_cycle+0x9c>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800080e:	e003      	b.n	8000818 <PWM_dir_and_cycle+0xa4>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	48000400 	.word	0x48000400

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	@ 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	@ 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800085a:	f000 fdb3 	bl	80013c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 fa3f 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2234      	movs	r2, #52	@ 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fbde 	bl	80040ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <MX_TIM1_Init+0x160>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000936:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000938:	2201      	movs	r2, #1
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8500;
 8000942:	4b42      	ldr	r3, [pc, #264]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000944:	f242 1234 	movw	r2, #8500	@ 0x2134
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000950:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b3d      	ldr	r3, [pc, #244]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095c:	483b      	ldr	r0, [pc, #236]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 800095e:	f001 fc5f 	bl	8002220 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000968:	f7ff fe9b 	bl	80006a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000976:	4619      	mov	r1, r3
 8000978:	4834      	ldr	r0, [pc, #208]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 800097a:	f001 ff1d 	bl	80027b8 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000984:	f7ff fe8d 	bl	80006a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000988:	4830      	ldr	r0, [pc, #192]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 800098a:	f001 fca0 	bl	80022ce <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000994:	f7ff fe85 	bl	80006a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009a8:	4619      	mov	r1, r3
 80009aa:	4828      	ldr	r0, [pc, #160]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 80009ac:	f002 fc52 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009b6:	f7ff fe74 	bl	80006a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 80009be:	f241 0399 	movw	r3, #4249	@ 0x1099
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	481a      	ldr	r0, [pc, #104]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 80009e2:	f001 fdd5 	bl	8002590 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80009ec:	f7ff fe59 	bl	80006a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000a2e:	f002 fc93 	bl	8003358 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000a38:	f7ff fe33 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <MX_TIM1_Init+0x15c>)
 8000a3e:	f000 f829 	bl	8000a94 <HAL_TIM_MspPostInit>

}
 8000a42:	bf00      	nop
 8000a44:	3770      	adds	r7, #112	@ 0x70
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_TIM_Base_MspInit+0x38>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10b      	bne.n	8000a7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40012c00 	.word	0x40012c00
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <HAL_TIM_MspPostInit+0x68>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d11d      	bne.n	8000af2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a11      	ldr	r2, [pc, #68]	@ (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ace:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aee:	f000 fa2b 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <MX_USART2_UART_Init+0x94>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4c:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f002 fc8f 	bl	8003470 <HAL_UART_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b58:	f7ff fda3 	bl	80006a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b60:	f003 f9fa 	bl	8003f58 <HAL_UARTEx_SetTxFifoThreshold>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f7ff fd9a 	bl	80006a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4808      	ldr	r0, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b72:	f003 fa2f 	bl	8003fd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b7c:	f7ff fd91 	bl	80006a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_USART2_UART_Init+0x90>)
 8000b82:	f003 f9b0 	bl	8003ee6 <HAL_UARTEx_DisableFifoMode>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f7ff fd89 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000074 	.word	0x20000074
 8000b98:	40004400 	.word	0x40004400

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09a      	sub	sp, #104	@ 0x68
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2244      	movs	r2, #68	@ 0x44
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fa95 	bl	80040ec <memset>
  if(uartHandle->Instance==USART2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c44 <HAL_UART_MspInit+0xa8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d136      	bne.n	8000c3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 f931 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff fd5d 	bl	80006a2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bec:	4a16      	ldr	r2, [pc, #88]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f000 f987 	bl	8000f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3768      	adds	r7, #104	@ 0x68
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff fe3c 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 fa3f 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fc81 	bl	8000584 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   r0, =_estack
 8000c84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c90:	080041b4 	.word	0x080041b4
  ldr r2, =_sbss
 8000c94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c98:	2000010c 	.word	0x2000010c

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>

08000c9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f91b 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f80e 	bl	8000cd0 <HAL_InitTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc0:	f7ff fdb0 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]

}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <HAL_InitTick+0x68>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d022      	beq.n	8000d2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_InitTick+0x6c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <HAL_InitTick+0x68>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f918 	bl	8000f2e <HAL_SYSTICK_Config>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10f      	bne.n	8000d24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	d809      	bhi.n	8000d1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d12:	f000 f8f2 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <HAL_InitTick+0x70>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e007      	b.n	8000d2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e004      	b.n	8000d2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e001      	b.n	8000d2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a03      	ldr	r2, [pc, #12]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d54:	6013      	str	r3, [r2, #0]
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20000108 	.word	0x20000108
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000108 	.word	0x20000108

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff5e 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffb2 	bl	8000ea0 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f56:	e15a      	b.n	800120e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 814c 	beq.w	8001208 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80a6 	beq.w	8001208 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <HAL_GPIO_Init+0x2e4>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c0:	4a5a      	ldr	r2, [pc, #360]	@ (800122c <HAL_GPIO_Init+0x2e4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c8:	4b58      	ldr	r3, [pc, #352]	@ (800122c <HAL_GPIO_Init+0x2e4>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d4:	4a56      	ldr	r2, [pc, #344]	@ (8001230 <HAL_GPIO_Init+0x2e8>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010fe:	d01f      	beq.n	8001140 <HAL_GPIO_Init+0x1f8>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4c      	ldr	r2, [pc, #304]	@ (8001234 <HAL_GPIO_Init+0x2ec>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d019      	beq.n	800113c <HAL_GPIO_Init+0x1f4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4b      	ldr	r2, [pc, #300]	@ (8001238 <HAL_GPIO_Init+0x2f0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x1f0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4a      	ldr	r2, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x2f4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1ec>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_GPIO_Init+0x2f8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1e8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a48      	ldr	r2, [pc, #288]	@ (8001244 <HAL_GPIO_Init+0x2fc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1e4>
 8001128:	2305      	movs	r3, #5
 800112a:	e00a      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 800112c:	2306      	movs	r3, #6
 800112e:	e008      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001130:	2304      	movs	r3, #4
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001134:	2303      	movs	r3, #3
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001140:	2300      	movs	r3, #0
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001152:	4937      	ldr	r1, [pc, #220]	@ (8001230 <HAL_GPIO_Init+0x2e8>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001160:	4b39      	ldr	r3, [pc, #228]	@ (8001248 <HAL_GPIO_Init+0x300>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001184:	4a30      	ldr	r2, [pc, #192]	@ (8001248 <HAL_GPIO_Init+0x300>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118a:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x300>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ae:	4a26      	ldr	r2, [pc, #152]	@ (8001248 <HAL_GPIO_Init+0x300>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011b4:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <HAL_GPIO_Init+0x300>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001248 <HAL_GPIO_Init+0x300>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_GPIO_Init+0x300>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001202:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <HAL_GPIO_Init+0x300>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f ae9d 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00
 8001240:	48001000 	.word	0x48001000
 8001244:	48001400 	.word	0x48001400
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d141      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800128a:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001296:	d131      	bne.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001298:	4b47      	ldr	r3, [pc, #284]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800129e:	4a46      	ldr	r2, [pc, #280]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	4b43      	ldr	r3, [pc, #268]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b0:	4a41      	ldr	r2, [pc, #260]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b8:	4b40      	ldr	r3, [pc, #256]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2232      	movs	r2, #50	@ 0x32
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	4a3f      	ldr	r2, [pc, #252]	@ (80013c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ce:	e002      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e2:	d102      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f2      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ea:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f6:	d158      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e057      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012fc:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001302:	4a2d      	ldr	r2, [pc, #180]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001308:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800130c:	e04d      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001314:	d141      	bne.n	800139a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800131e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001322:	d131      	bne.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800133c:	4a1e      	ldr	r2, [pc, #120]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001342:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2232      	movs	r2, #50	@ 0x32
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a1c      	ldr	r2, [pc, #112]	@ (80013c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135a:	e002      	b.n	8001362 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3b01      	subs	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136e:	d102      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f2      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001382:	d112      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e011      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001394:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001398:	e007      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800139a:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40007000 	.word	0x40007000
 80013bc:	20000000 	.word	0x20000000
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d2:	6093      	str	r3, [r2, #8]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e2fe      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d075      	beq.n	80014ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	4b97      	ldr	r3, [pc, #604]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800140c:	4b94      	ldr	r3, [pc, #592]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d102      	bne.n	8001422 <HAL_RCC_OscConfig+0x3e>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d002      	beq.n	8001428 <HAL_RCC_OscConfig+0x44>
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d10b      	bne.n	8001440 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	4b8d      	ldr	r3, [pc, #564]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d05b      	beq.n	80014ec <HAL_RCC_OscConfig+0x108>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d157      	bne.n	80014ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e2d9      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001448:	d106      	bne.n	8001458 <HAL_RCC_OscConfig+0x74>
 800144a:	4b85      	ldr	r3, [pc, #532]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a84      	ldr	r2, [pc, #528]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e01d      	b.n	8001494 <HAL_RCC_OscConfig+0xb0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x98>
 8001462:	4b7f      	ldr	r3, [pc, #508]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b7c      	ldr	r3, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7b      	ldr	r2, [pc, #492]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0xb0>
 800147c:	4b78      	ldr	r3, [pc, #480]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a77      	ldr	r2, [pc, #476]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b75      	ldr	r3, [pc, #468]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a74      	ldr	r2, [pc, #464]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc64 	bl	8000d68 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc60 	bl	8000d68 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e29e      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xc0>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc50 	bl	8000d68 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fc4c 	bl	8000d68 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	@ 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e28a      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	4b60      	ldr	r3, [pc, #384]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0xe8>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d075      	beq.n	80015e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fa:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001504:	4b56      	ldr	r3, [pc, #344]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d102      	bne.n	800151a <HAL_RCC_OscConfig+0x136>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d002      	beq.n	8001520 <HAL_RCC_OscConfig+0x13c>
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d11f      	bne.n	8001560 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x154>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e25d      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	4946      	ldr	r1, [pc, #280]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800154c:	4b45      	ldr	r3, [pc, #276]	@ (8001664 <HAL_RCC_OscConfig+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fbbd 	bl	8000cd0 <HAL_InitTick>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d043      	beq.n	80015e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e249      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a3c      	ldr	r2, [pc, #240]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fbf8 	bl	8000d68 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fbf4 	bl	8000d68 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e232      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	061b      	lsls	r3, r3, #24
 80015a8:	492d      	ldr	r1, [pc, #180]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
 80015ae:	e01a      	b.n	80015e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fbd4 	bl	8000d68 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fbd0 	bl	8000d68 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e20e      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d6:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1e0>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d041      	beq.n	8001676 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01c      	beq.n	8001634 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fbad 	bl	8000d68 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fba9 	bl	8000d68 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1e7      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ef      	beq.n	8001612 <HAL_RCC_OscConfig+0x22e>
 8001632:	e020      	b.n	8001676 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163a:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <HAL_RCC_OscConfig+0x27c>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fb90 	bl	8000d68 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164a:	e00d      	b.n	8001668 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fb8c 	bl	8000d68 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d906      	bls.n	8001668 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1ca      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	4b8c      	ldr	r3, [pc, #560]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ea      	bne.n	800164c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a6 	beq.w	80017d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001688:	4b84      	ldr	r3, [pc, #528]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_OscConfig+0x2b4>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x2b6>
 8001698:	2300      	movs	r3, #0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b7f      	ldr	r3, [pc, #508]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a7e      	ldr	r2, [pc, #504]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b7c      	ldr	r3, [pc, #496]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b79      	ldr	r3, [pc, #484]	@ (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c6:	4b76      	ldr	r3, [pc, #472]	@ (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a75      	ldr	r2, [pc, #468]	@ (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fb49 	bl	8000d68 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fb45 	bl	8000d68 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e183      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ec:	4b6c      	ldr	r3, [pc, #432]	@ (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_RCC_OscConfig+0x32e>
 8001700:	4b66      	ldr	r3, [pc, #408]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a65      	ldr	r2, [pc, #404]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001710:	e024      	b.n	800175c <HAL_RCC_OscConfig+0x378>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d110      	bne.n	800173c <HAL_RCC_OscConfig+0x358>
 800171a:	4b60      	ldr	r3, [pc, #384]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001720:	4a5e      	ldr	r2, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172a:	4b5c      	ldr	r3, [pc, #368]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001730:	4a5a      	ldr	r2, [pc, #360]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800173a:	e00f      	b.n	800175c <HAL_RCC_OscConfig+0x378>
 800173c:	4b57      	ldr	r3, [pc, #348]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001742:	4a56      	ldr	r2, [pc, #344]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800174c:	4b53      	ldr	r3, [pc, #332]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001752:	4a52      	ldr	r2, [pc, #328]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d016      	beq.n	8001792 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fb00 	bl	8000d68 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fafc 	bl	8000d68 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e138      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001782:	4b46      	ldr	r3, [pc, #280]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ed      	beq.n	800176c <HAL_RCC_OscConfig+0x388>
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fae9 	bl	8000d68 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fae5 	bl	8000d68 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e121      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ed      	bne.n	800179a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b35      	ldr	r3, [pc, #212]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	4a34      	ldr	r2, [pc, #208]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03c      	beq.n	8001856 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01c      	beq.n	800181e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e4:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ea:	4a2c      	ldr	r2, [pc, #176]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fab8 	bl	8000d68 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fc:	f7ff fab4 	bl	8000d68 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0f2      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ef      	beq.n	80017fc <HAL_RCC_OscConfig+0x418>
 800181c:	e01b      	b.n	8001856 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001824:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff fa9b 	bl	8000d68 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001836:	f7ff fa97 	bl	8000d68 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0d5      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ef      	bne.n	8001836 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80c9 	beq.w	80019f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b0c      	cmp	r3, #12
 800186a:	f000 8083 	beq.w	8001974 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d15e      	bne.n	8001934 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_RCC_OscConfig+0x4b8>)
 800187c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fa71 	bl	8000d68 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001888:	e00c      	b.n	80018a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fa6d 	bl	8000d68 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d905      	bls.n	80018a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0ab      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
 800189c:	40021000 	.word	0x40021000
 80018a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	4b55      	ldr	r3, [pc, #340]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ec      	bne.n	800188a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b52      	ldr	r3, [pc, #328]	@ (8001a00 <HAL_RCC_OscConfig+0x61c>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6a11      	ldr	r1, [r2, #32]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018c0:	3a01      	subs	r2, #1
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018ca:	0212      	lsls	r2, r2, #8
 80018cc:	4311      	orrs	r1, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018d2:	0852      	lsrs	r2, r2, #1
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0552      	lsls	r2, r2, #21
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018de:	0852      	lsrs	r2, r2, #1
 80018e0:	3a01      	subs	r2, #1
 80018e2:	0652      	lsls	r2, r2, #25
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018ea:	06d2      	lsls	r2, r2, #27
 80018ec:	430a      	orrs	r2, r1
 80018ee:	4943      	ldr	r1, [pc, #268]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a40      	ldr	r2, [pc, #256]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a3d      	ldr	r2, [pc, #244]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fa2c 	bl	8000d68 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fa28 	bl	8000d68 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e066      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x530>
 8001932:	e05e      	b.n	80019f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a30      	ldr	r2, [pc, #192]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fa12 	bl	8000d68 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fa0e 	bl	8000d68 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04c      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001966:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4924      	ldr	r1, [pc, #144]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 800196c:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <HAL_RCC_OscConfig+0x620>)
 800196e:	4013      	ands	r3, r2
 8001970:	60cb      	str	r3, [r1, #12]
 8001972:	e03e      	b.n	80019f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e039      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <HAL_RCC_OscConfig+0x618>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	429a      	cmp	r2, r3
 8001992:	d12c      	bne.n	80019ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	3b01      	subs	r3, #1
 80019a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d123      	bne.n	80019ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d11b      	bne.n	80019ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d113      	bne.n	80019ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	019f800c 	.word	0x019f800c
 8001a04:	feeefffc 	.word	0xfeeefffc

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e11e      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b91      	ldr	r3, [pc, #580]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b8e      	ldr	r3, [pc, #568]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	498c      	ldr	r1, [pc, #560]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b8a      	ldr	r3, [pc, #552]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e106      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d073      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d129      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a64:	4b81      	ldr	r3, [pc, #516]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0f4      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a74:	f000 f99e 	bl	8001db4 <RCC_GetSysClockFreqFromPLLSource>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8001c70 <HAL_RCC_ClockConfig+0x268>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d93f      	bls.n	8001b02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a82:	4b7a      	ldr	r3, [pc, #488]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d033      	beq.n	8001b02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12f      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aa2:	4b72      	ldr	r3, [pc, #456]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aaa:	4a70      	ldr	r2, [pc, #448]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e024      	b.n	8001b02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0c6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad0:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0be      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ae0:	f000 f8ce 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4a61      	ldr	r2, [pc, #388]	@ (8001c70 <HAL_RCC_ClockConfig+0x268>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d909      	bls.n	8001b02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aee:	4b5f      	ldr	r3, [pc, #380]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001af6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4957      	ldr	r1, [pc, #348]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b14:	f7ff f928 	bl	8000d68 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff f924 	bl	8000d68 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e095      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b4e      	ldr	r3, [pc, #312]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b5c:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a42      	ldr	r2, [pc, #264]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b74:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b39      	ldr	r3, [pc, #228]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4936      	ldr	r1, [pc, #216]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
 8001b96:	e008      	b.n	8001baa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b80      	cmp	r3, #128	@ 0x80
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001ba4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ba8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001baa:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d21d      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 020f 	bic.w	r2, r3, #15
 8001bc0:	4929      	ldr	r1, [pc, #164]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f8ce 	bl	8000d68 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7ff f8ca 	bl	8000d68 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e03b      	b.n	8001c5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <HAL_RCC_ClockConfig+0x260>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d1ed      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4917      	ldr	r1, [pc, #92]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490f      	ldr	r1, [pc, #60]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c32:	f000 f825 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_RCC_ClockConfig+0x264>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490c      	ldr	r1, [pc, #48]	@ (8001c74 <HAL_RCC_ClockConfig+0x26c>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <HAL_RCC_ClockConfig+0x270>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f83a 	bl	8000cd0 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	04c4b400 	.word	0x04c4b400
 8001c74:	08004164 	.word	0x08004164
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c86:	4b2c      	ldr	r3, [pc, #176]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	e047      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	e03e      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d136      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cde:	68d2      	ldr	r2, [r2, #12]
 8001ce0:	0a12      	lsrs	r2, r2, #8
 8001ce2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
      break;
 8001cec:	e00c      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf8:	68d2      	ldr	r2, [r2, #12]
 8001cfa:	0a12      	lsrs	r2, r2, #8
 8001cfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
      break;
 8001d06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0e5b      	lsrs	r3, r3, #25
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	3301      	adds	r3, #1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e001      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d28:	693b      	ldr	r3, [r7, #16]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4904      	ldr	r1, [pc, #16]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08004174 	.word	0x08004174

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d8c:	f7ff ffda 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0adb      	lsrs	r3, r3, #11
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4904      	ldr	r1, [pc, #16]	@ (8001db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004174 	.word	0x08004174

08001db4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d10c      	bne.n	8001df2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd8:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de2:	68d2      	ldr	r2, [r2, #12]
 8001de4:	0a12      	lsrs	r2, r2, #8
 8001de6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
    break;
 8001df0:	e00c      	b.n	8001e0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	0a12      	lsrs	r2, r2, #8
 8001e00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
    break;
 8001e0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0e5b      	lsrs	r3, r3, #25
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	007a1200 	.word	0x007a1200
 8001e3c:	00f42400 	.word	0x00f42400

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8098 	beq.w	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b43      	ldr	r3, [pc, #268]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b40      	ldr	r3, [pc, #256]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	4a3f      	ldr	r2, [pc, #252]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a39      	ldr	r2, [pc, #228]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e96:	f7fe ff67 	bl	8000d68 <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9e:	f7fe ff63 	bl	8000d68 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d902      	bls.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	74fb      	strb	r3, [r7, #19]
        break;
 8001eb0:	e005      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb2:	4b30      	ldr	r3, [pc, #192]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ef      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d159      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ece:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01e      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d019      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f0c:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe ff23 	bl	8000d68 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	e00b      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe ff1f 	bl	8000d68 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d902      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f3c:	e006      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ec      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10b      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	4903      	ldr	r1, [pc, #12]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f68:	e008      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6a:	7cfb      	ldrb	r3, [r7, #19]
 8001f6c:	74bb      	strb	r3, [r7, #18]
 8001f6e:	e005      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7c:	7c7b      	ldrb	r3, [r7, #17]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4ba6      	ldr	r3, [pc, #664]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4aa5      	ldr	r2, [pc, #660]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9a:	4ba0      	ldr	r3, [pc, #640]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa0:	f023 0203 	bic.w	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	499c      	ldr	r1, [pc, #624]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fbc:	4b97      	ldr	r3, [pc, #604]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc2:	f023 020c 	bic.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4994      	ldr	r1, [pc, #592]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fde:	4b8f      	ldr	r3, [pc, #572]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	498b      	ldr	r1, [pc, #556]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002000:	4b86      	ldr	r3, [pc, #536]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	4983      	ldr	r1, [pc, #524]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002022:	4b7e      	ldr	r3, [pc, #504]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002028:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	497a      	ldr	r1, [pc, #488]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002044:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	4972      	ldr	r1, [pc, #456]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002066:	4b6d      	ldr	r3, [pc, #436]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4969      	ldr	r1, [pc, #420]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002088:	4b64      	ldr	r3, [pc, #400]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4961      	ldr	r1, [pc, #388]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020aa:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	4958      	ldr	r1, [pc, #352]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020cc:	4b53      	ldr	r3, [pc, #332]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	4950      	ldr	r1, [pc, #320]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ec:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a4a      	ldr	r2, [pc, #296]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002104:	4b45      	ldr	r3, [pc, #276]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	4942      	ldr	r1, [pc, #264]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002122:	d105      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800213c:	4b37      	ldr	r3, [pc, #220]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4934      	ldr	r1, [pc, #208]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b2f      	ldr	r3, [pc, #188]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a2e      	ldr	r2, [pc, #184]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002174:	4b29      	ldr	r3, [pc, #164]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002182:	4926      	ldr	r1, [pc, #152]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002192:	d105      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002194:	4b21      	ldr	r3, [pc, #132]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a20      	ldr	r2, [pc, #128]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800219e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	4918      	ldr	r1, [pc, #96]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ca:	d105      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a12      	ldr	r2, [pc, #72]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	490a      	ldr	r1, [pc, #40]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002210:	7cbb      	ldrb	r3, [r7, #18]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e049      	b.n	80022c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fc04 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 fba4 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e049      	b.n	8002374 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f841 	bl	800237c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f000 fb4d 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_TIM_PWM_Start+0x24>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e03c      	b.n	800242e <HAL_TIM_PWM_Start+0x9e>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d109      	bne.n	80023ce <HAL_TIM_PWM_Start+0x3e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	e02f      	b.n	800242e <HAL_TIM_PWM_Start+0x9e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d109      	bne.n	80023e8 <HAL_TIM_PWM_Start+0x58>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e022      	b.n	800242e <HAL_TIM_PWM_Start+0x9e>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d109      	bne.n	8002402 <HAL_TIM_PWM_Start+0x72>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e015      	b.n	800242e <HAL_TIM_PWM_Start+0x9e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d109      	bne.n	800241c <HAL_TIM_PWM_Start+0x8c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e008      	b.n	800242e <HAL_TIM_PWM_Start+0x9e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e097      	b.n	8002566 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <HAL_TIM_PWM_Start+0xb6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002444:	e023      	b.n	800248e <HAL_TIM_PWM_Start+0xfe>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Start+0xc6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002454:	e01b      	b.n	800248e <HAL_TIM_PWM_Start+0xfe>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0xd6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002464:	e013      	b.n	800248e <HAL_TIM_PWM_Start+0xfe>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0xe6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002474:	e00b      	b.n	800248e <HAL_TIM_PWM_Start+0xfe>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b10      	cmp	r3, #16
 800247a:	d104      	bne.n	8002486 <HAL_TIM_PWM_Start+0xf6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002484:	e003      	b.n	800248e <HAL_TIM_PWM_Start+0xfe>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 feb6 	bl	8003208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a33      	ldr	r2, [pc, #204]	@ (8002570 <HAL_TIM_PWM_Start+0x1e0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_TIM_PWM_Start+0x13e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a32      	ldr	r2, [pc, #200]	@ (8002574 <HAL_TIM_PWM_Start+0x1e4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_TIM_PWM_Start+0x13e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a30      	ldr	r2, [pc, #192]	@ (8002578 <HAL_TIM_PWM_Start+0x1e8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_TIM_PWM_Start+0x13e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2f      	ldr	r2, [pc, #188]	@ (800257c <HAL_TIM_PWM_Start+0x1ec>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_TIM_PWM_Start+0x13e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002580 <HAL_TIM_PWM_Start+0x1f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x142>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_TIM_PWM_Start+0x144>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a20      	ldr	r2, [pc, #128]	@ (8002570 <HAL_TIM_PWM_Start+0x1e0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_TIM_PWM_Start+0x194>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fa:	d013      	beq.n	8002524 <HAL_TIM_PWM_Start+0x194>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a20      	ldr	r2, [pc, #128]	@ (8002584 <HAL_TIM_PWM_Start+0x1f4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_TIM_PWM_Start+0x194>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1f      	ldr	r2, [pc, #124]	@ (8002588 <HAL_TIM_PWM_Start+0x1f8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_TIM_PWM_Start+0x194>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_TIM_PWM_Start+0x1e4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_TIM_PWM_Start+0x194>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a16      	ldr	r2, [pc, #88]	@ (8002578 <HAL_TIM_PWM_Start+0x1e8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d115      	bne.n	8002550 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_TIM_PWM_Start+0x1fc>)
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b06      	cmp	r3, #6
 8002534:	d015      	beq.n	8002562 <HAL_TIM_PWM_Start+0x1d2>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253c:	d011      	beq.n	8002562 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254e:	e008      	b.n	8002562 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e000      	b.n	8002564 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40013400 	.word	0x40013400
 8002578:	40014000 	.word	0x40014000
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	00010007 	.word	0x00010007

08002590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0ff      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b14      	cmp	r3, #20
 80025ba:	f200 80f0 	bhi.w	800279e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80025be:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	08002619 	.word	0x08002619
 80025c8:	0800279f 	.word	0x0800279f
 80025cc:	0800279f 	.word	0x0800279f
 80025d0:	0800279f 	.word	0x0800279f
 80025d4:	08002659 	.word	0x08002659
 80025d8:	0800279f 	.word	0x0800279f
 80025dc:	0800279f 	.word	0x0800279f
 80025e0:	0800279f 	.word	0x0800279f
 80025e4:	0800269b 	.word	0x0800269b
 80025e8:	0800279f 	.word	0x0800279f
 80025ec:	0800279f 	.word	0x0800279f
 80025f0:	0800279f 	.word	0x0800279f
 80025f4:	080026db 	.word	0x080026db
 80025f8:	0800279f 	.word	0x0800279f
 80025fc:	0800279f 	.word	0x0800279f
 8002600:	0800279f 	.word	0x0800279f
 8002604:	0800271d 	.word	0x0800271d
 8002608:	0800279f 	.word	0x0800279f
 800260c:	0800279f 	.word	0x0800279f
 8002610:	0800279f 	.word	0x0800279f
 8002614:	0800275d 	.word	0x0800275d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fa60 	bl	8002ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0204 	bic.w	r2, r2, #4
 8002642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6999      	ldr	r1, [r3, #24]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	619a      	str	r2, [r3, #24]
      break;
 8002656:	e0a5      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fad0 	bl	8002c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6999      	ldr	r1, [r3, #24]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	021a      	lsls	r2, r3, #8
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	619a      	str	r2, [r3, #24]
      break;
 8002698:	e084      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fb39 	bl	8002d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0208 	orr.w	r2, r2, #8
 80026b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0204 	bic.w	r2, r2, #4
 80026c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69d9      	ldr	r1, [r3, #28]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	61da      	str	r2, [r3, #28]
      break;
 80026d8:	e064      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fba1 	bl	8002e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69d9      	ldr	r1, [r3, #28]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	61da      	str	r2, [r3, #28]
      break;
 800271a:	e043      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fc0a 	bl	8002f3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0208 	orr.w	r2, r2, #8
 8002736:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800275a:	e023      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fc4e 	bl	8003004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002776:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002786:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	021a      	lsls	r2, r3, #8
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800279c:	e002      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
      break;
 80027a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIM_ConfigClockSource+0x1c>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0de      	b.n	8002992 <HAL_TIM_ConfigClockSource+0x1da>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80027f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a63      	ldr	r2, [pc, #396]	@ (800299c <HAL_TIM_ConfigClockSource+0x1e4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	f000 80a9 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 8002814:	4a61      	ldr	r2, [pc, #388]	@ (800299c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	f200 80ae 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 800281c:	4a60      	ldr	r2, [pc, #384]	@ (80029a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f000 80a1 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 8002824:	4a5e      	ldr	r2, [pc, #376]	@ (80029a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f200 80a6 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 800282c:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f000 8099 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 8002834:	4a5b      	ldr	r2, [pc, #364]	@ (80029a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002836:	4293      	cmp	r3, r2
 8002838:	f200 809e 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 800283c:	4a5a      	ldr	r2, [pc, #360]	@ (80029a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f000 8091 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 8002844:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	f200 8096 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 800284c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002850:	f000 8089 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 8002854:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002858:	f200 808e 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 800285c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002860:	d03e      	beq.n	80028e0 <HAL_TIM_ConfigClockSource+0x128>
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002866:	f200 8087 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800286e:	f000 8086 	beq.w	800297e <HAL_TIM_ConfigClockSource+0x1c6>
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002876:	d87f      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 8002878:	2b70      	cmp	r3, #112	@ 0x70
 800287a:	d01a      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0xfa>
 800287c:	2b70      	cmp	r3, #112	@ 0x70
 800287e:	d87b      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 8002880:	2b60      	cmp	r3, #96	@ 0x60
 8002882:	d050      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
 8002884:	2b60      	cmp	r3, #96	@ 0x60
 8002886:	d877      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 8002888:	2b50      	cmp	r3, #80	@ 0x50
 800288a:	d03c      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x14e>
 800288c:	2b50      	cmp	r3, #80	@ 0x50
 800288e:	d873      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 8002890:	2b40      	cmp	r3, #64	@ 0x40
 8002892:	d058      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x18e>
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	d86f      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 8002898:	2b30      	cmp	r3, #48	@ 0x30
 800289a:	d064      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 800289c:	2b30      	cmp	r3, #48	@ 0x30
 800289e:	d86b      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d060      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d867      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05c      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d05a      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x1ae>
 80028b0:	e062      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c2:	f000 fc81 	bl	80031c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	609a      	str	r2, [r3, #8]
      break;
 80028de:	e04f      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	f000 fc6a 	bl	80031c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002902:	609a      	str	r2, [r3, #8]
      break;
 8002904:	e03c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	461a      	mov	r2, r3
 8002914:	f000 fbdc 	bl	80030d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2150      	movs	r1, #80	@ 0x50
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fc35 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002924:	e02c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002932:	461a      	mov	r2, r3
 8002934:	f000 fbfb 	bl	800312e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2160      	movs	r1, #96	@ 0x60
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fc25 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002944:	e01c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	461a      	mov	r2, r3
 8002954:	f000 fbbc 	bl	80030d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2140      	movs	r1, #64	@ 0x40
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fc15 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002964:	e00c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f000 fc0c 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002976:	e003      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e000      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800297e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	00100070 	.word	0x00100070
 80029a0:	00100040 	.word	0x00100040
 80029a4:	00100030 	.word	0x00100030
 80029a8:	00100020 	.word	0x00100020

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a42      	ldr	r2, [pc, #264]	@ (8002ac8 <TIM_Base_SetConfig+0x11c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00f      	beq.n	80029e4 <TIM_Base_SetConfig+0x38>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ca:	d00b      	beq.n	80029e4 <TIM_Base_SetConfig+0x38>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3f      	ldr	r2, [pc, #252]	@ (8002acc <TIM_Base_SetConfig+0x120>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <TIM_Base_SetConfig+0x38>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ad0 <TIM_Base_SetConfig+0x124>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_Base_SetConfig+0x38>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3d      	ldr	r2, [pc, #244]	@ (8002ad4 <TIM_Base_SetConfig+0x128>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d108      	bne.n	80029f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a33      	ldr	r2, [pc, #204]	@ (8002ac8 <TIM_Base_SetConfig+0x11c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01b      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a04:	d017      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a30      	ldr	r2, [pc, #192]	@ (8002acc <TIM_Base_SetConfig+0x120>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad0 <TIM_Base_SetConfig+0x124>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00f      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad4 <TIM_Base_SetConfig+0x128>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad8 <TIM_Base_SetConfig+0x12c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	@ (8002adc <TIM_Base_SetConfig+0x130>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae0 <TIM_Base_SetConfig+0x134>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <TIM_Base_SetConfig+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00f      	beq.n	8002a94 <TIM_Base_SetConfig+0xe8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a17      	ldr	r2, [pc, #92]	@ (8002ad4 <TIM_Base_SetConfig+0x128>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00b      	beq.n	8002a94 <TIM_Base_SetConfig+0xe8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a16      	ldr	r2, [pc, #88]	@ (8002ad8 <TIM_Base_SetConfig+0x12c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <TIM_Base_SetConfig+0xe8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a15      	ldr	r2, [pc, #84]	@ (8002adc <TIM_Base_SetConfig+0x130>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_Base_SetConfig+0xe8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ae0 <TIM_Base_SetConfig+0x134>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	611a      	str	r2, [r3, #16]
  }
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40013400 	.word	0x40013400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40014400 	.word	0x40014400
 8002ae0:	40014800 	.word	0x40014800

08002ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f023 0201 	bic.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <TIM_OC1_SetConfig+0x10c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00f      	beq.n	8002b64 <TIM_OC1_SetConfig+0x80>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <TIM_OC1_SetConfig+0x110>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_OC1_SetConfig+0x80>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <TIM_OC1_SetConfig+0x114>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_OC1_SetConfig+0x80>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <TIM_OC1_SetConfig+0x118>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_OC1_SetConfig+0x80>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	@ (8002c00 <TIM_OC1_SetConfig+0x11c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10c      	bne.n	8002b7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0308 	bic.w	r3, r3, #8
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf0 <TIM_OC1_SetConfig+0x10c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00f      	beq.n	8002ba6 <TIM_OC1_SetConfig+0xc2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf4 <TIM_OC1_SetConfig+0x110>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_OC1_SetConfig+0xc2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <TIM_OC1_SetConfig+0x114>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <TIM_OC1_SetConfig+0xc2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <TIM_OC1_SetConfig+0x118>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_OC1_SetConfig+0xc2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <TIM_OC1_SetConfig+0x11c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d111      	bne.n	8002bca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	621a      	str	r2, [r3, #32]
}
 8002be4:	bf00      	nop
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40013400 	.word	0x40013400
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800

08002c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 0210 	bic.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0320 	bic.w	r3, r3, #32
 8002c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a28      	ldr	r2, [pc, #160]	@ (8002d04 <TIM_OC2_SetConfig+0x100>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_OC2_SetConfig+0x6c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <TIM_OC2_SetConfig+0x104>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10d      	bne.n	8002c8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <TIM_OC2_SetConfig+0x100>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00f      	beq.n	8002cb4 <TIM_OC2_SetConfig+0xb0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <TIM_OC2_SetConfig+0x104>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <TIM_OC2_SetConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <TIM_OC2_SetConfig+0x108>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <TIM_OC2_SetConfig+0xb0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <TIM_OC2_SetConfig+0x10c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_OC2_SetConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a19      	ldr	r2, [pc, #100]	@ (8002d14 <TIM_OC2_SetConfig+0x110>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d113      	bne.n	8002cdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800

08002d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0303 	bic.w	r3, r3, #3
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a27      	ldr	r2, [pc, #156]	@ (8002e14 <TIM_OC3_SetConfig+0xfc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_OC3_SetConfig+0x6a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	@ (8002e18 <TIM_OC3_SetConfig+0x100>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10d      	bne.n	8002d9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <TIM_OC3_SetConfig+0xfc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_OC3_SetConfig+0xae>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e18 <TIM_OC3_SetConfig+0x100>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_OC3_SetConfig+0xae>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e1c <TIM_OC3_SetConfig+0x104>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_OC3_SetConfig+0xae>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a19      	ldr	r2, [pc, #100]	@ (8002e20 <TIM_OC3_SetConfig+0x108>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_OC3_SetConfig+0xae>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <TIM_OC3_SetConfig+0x10c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d113      	bne.n	8002dee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40013400 	.word	0x40013400
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800

08002e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	031b      	lsls	r3, r3, #12
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a28      	ldr	r2, [pc, #160]	@ (8002f28 <TIM_OC4_SetConfig+0x100>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_OC4_SetConfig+0x6c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a27      	ldr	r2, [pc, #156]	@ (8002f2c <TIM_OC4_SetConfig+0x104>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d10d      	bne.n	8002eb0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	031b      	lsls	r3, r3, #12
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <TIM_OC4_SetConfig+0x100>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_OC4_SetConfig+0xb0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <TIM_OC4_SetConfig+0x104>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_OC4_SetConfig+0xb0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <TIM_OC4_SetConfig+0x108>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_OC4_SetConfig+0xb0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <TIM_OC4_SetConfig+0x10c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_OC4_SetConfig+0xb0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <TIM_OC4_SetConfig+0x110>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d113      	bne.n	8002f00 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ede:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002ee6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	019b      	lsls	r3, r3, #6
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40013400 	.word	0x40013400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800

08002f3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002f80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a17      	ldr	r2, [pc, #92]	@ (8002ff0 <TIM_OC5_SetConfig+0xb4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_OC5_SetConfig+0x7a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <TIM_OC5_SetConfig+0xb8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_OC5_SetConfig+0x7a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <TIM_OC5_SetConfig+0xbc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_OC5_SetConfig+0x7a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <TIM_OC5_SetConfig+0xc0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_OC5_SetConfig+0x7a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <TIM_OC5_SetConfig+0xc4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d109      	bne.n	8002fca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	621a      	str	r2, [r3, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40013400 	.word	0x40013400
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400
 8003000:	40014800 	.word	0x40014800

08003004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800304a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	051b      	lsls	r3, r3, #20
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <TIM_OC6_SetConfig+0xb8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00f      	beq.n	8003080 <TIM_OC6_SetConfig+0x7c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <TIM_OC6_SetConfig+0xbc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00b      	beq.n	8003080 <TIM_OC6_SetConfig+0x7c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a16      	ldr	r2, [pc, #88]	@ (80030c4 <TIM_OC6_SetConfig+0xc0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_OC6_SetConfig+0x7c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a15      	ldr	r2, [pc, #84]	@ (80030c8 <TIM_OC6_SetConfig+0xc4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_OC6_SetConfig+0x7c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a14      	ldr	r2, [pc, #80]	@ (80030cc <TIM_OC6_SetConfig+0xc8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d109      	bne.n	8003094 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	029b      	lsls	r3, r3, #10
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40013400 	.word	0x40013400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800

080030d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0201 	bic.w	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 030a 	bic.w	r3, r3, #10
 800310c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800312e:	b480      	push	{r7}
 8003130:	b087      	sub	sp, #28
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f023 0210 	bic.w	r2, r3, #16
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	031b      	lsls	r3, r3, #12
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800316a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80031a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f043 0307 	orr.w	r3, r3, #7
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2201      	movs	r2, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e065      	b.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2c      	ldr	r2, [pc, #176]	@ (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80032a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e2:	d013      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a18      	ldr	r2, [pc, #96]	@ (800334c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a17      	ldr	r2, [pc, #92]	@ (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a12      	ldr	r2, [pc, #72]	@ (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a13      	ldr	r2, [pc, #76]	@ (8003354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10c      	bne.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003312:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	4313      	orrs	r3, r2
 800331c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40013400 	.word	0x40013400
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40014000 	.word	0x40014000

08003358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003370:	2302      	movs	r3, #2
 8003372:	e073      	b.n	800345c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a18      	ldr	r2, [pc, #96]	@ (800346c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d11c      	bne.n	800344a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	051b      	lsls	r3, r3, #20
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40013400 	.word	0x40013400

08003470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e042      	b.n	8003508 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7fd fb81 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	@ 0x24
 800349e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 faf4 	bl	8003aa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f825 	bl	8003510 <UART_SetConfig>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e01b      	b.n	8003508 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fb73 	bl	8003bec <UART_CheckIdleState>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003514:	b08c      	sub	sp, #48	@ 0x30
 8003516:	af00      	add	r7, sp, #0
 8003518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	431a      	orrs	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	4313      	orrs	r3, r2
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4bab      	ldr	r3, [pc, #684]	@ (80037ec <UART_SetConfig+0x2dc>)
 8003540:	4013      	ands	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003548:	430b      	orrs	r3, r1
 800354a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4aa0      	ldr	r2, [pc, #640]	@ (80037f0 <UART_SetConfig+0x2e0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003578:	4313      	orrs	r3, r2
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003586:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	f023 010f 	bic.w	r1, r3, #15
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a91      	ldr	r2, [pc, #580]	@ (80037f4 <UART_SetConfig+0x2e4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d125      	bne.n	8003600 <UART_SetConfig+0xf0>
 80035b4:	4b90      	ldr	r3, [pc, #576]	@ (80037f8 <UART_SetConfig+0x2e8>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d81a      	bhi.n	80035f8 <UART_SetConfig+0xe8>
 80035c2:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <UART_SetConfig+0xb8>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035e9 	.word	0x080035e9
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035f1 	.word	0x080035f1
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035de:	e0d6      	b.n	800378e <UART_SetConfig+0x27e>
 80035e0:	2302      	movs	r3, #2
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e6:	e0d2      	b.n	800378e <UART_SetConfig+0x27e>
 80035e8:	2304      	movs	r3, #4
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ee:	e0ce      	b.n	800378e <UART_SetConfig+0x27e>
 80035f0:	2308      	movs	r3, #8
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f6:	e0ca      	b.n	800378e <UART_SetConfig+0x27e>
 80035f8:	2310      	movs	r3, #16
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fe:	e0c6      	b.n	800378e <UART_SetConfig+0x27e>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7d      	ldr	r2, [pc, #500]	@ (80037fc <UART_SetConfig+0x2ec>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d138      	bne.n	800367c <UART_SetConfig+0x16c>
 800360a:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <UART_SetConfig+0x2e8>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d82d      	bhi.n	8003674 <UART_SetConfig+0x164>
 8003618:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <UART_SetConfig+0x110>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003655 	.word	0x08003655
 8003624:	08003675 	.word	0x08003675
 8003628:	08003675 	.word	0x08003675
 800362c:	08003675 	.word	0x08003675
 8003630:	08003665 	.word	0x08003665
 8003634:	08003675 	.word	0x08003675
 8003638:	08003675 	.word	0x08003675
 800363c:	08003675 	.word	0x08003675
 8003640:	0800365d 	.word	0x0800365d
 8003644:	08003675 	.word	0x08003675
 8003648:	08003675 	.word	0x08003675
 800364c:	08003675 	.word	0x08003675
 8003650:	0800366d 	.word	0x0800366d
 8003654:	2300      	movs	r3, #0
 8003656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365a:	e098      	b.n	800378e <UART_SetConfig+0x27e>
 800365c:	2302      	movs	r3, #2
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003662:	e094      	b.n	800378e <UART_SetConfig+0x27e>
 8003664:	2304      	movs	r3, #4
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800366a:	e090      	b.n	800378e <UART_SetConfig+0x27e>
 800366c:	2308      	movs	r3, #8
 800366e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003672:	e08c      	b.n	800378e <UART_SetConfig+0x27e>
 8003674:	2310      	movs	r3, #16
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800367a:	e088      	b.n	800378e <UART_SetConfig+0x27e>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5f      	ldr	r2, [pc, #380]	@ (8003800 <UART_SetConfig+0x2f0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d125      	bne.n	80036d2 <UART_SetConfig+0x1c2>
 8003686:	4b5c      	ldr	r3, [pc, #368]	@ (80037f8 <UART_SetConfig+0x2e8>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003690:	2b30      	cmp	r3, #48	@ 0x30
 8003692:	d016      	beq.n	80036c2 <UART_SetConfig+0x1b2>
 8003694:	2b30      	cmp	r3, #48	@ 0x30
 8003696:	d818      	bhi.n	80036ca <UART_SetConfig+0x1ba>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d00a      	beq.n	80036b2 <UART_SetConfig+0x1a2>
 800369c:	2b20      	cmp	r3, #32
 800369e:	d814      	bhi.n	80036ca <UART_SetConfig+0x1ba>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <UART_SetConfig+0x19a>
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d008      	beq.n	80036ba <UART_SetConfig+0x1aa>
 80036a8:	e00f      	b.n	80036ca <UART_SetConfig+0x1ba>
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b0:	e06d      	b.n	800378e <UART_SetConfig+0x27e>
 80036b2:	2302      	movs	r3, #2
 80036b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b8:	e069      	b.n	800378e <UART_SetConfig+0x27e>
 80036ba:	2304      	movs	r3, #4
 80036bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c0:	e065      	b.n	800378e <UART_SetConfig+0x27e>
 80036c2:	2308      	movs	r3, #8
 80036c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c8:	e061      	b.n	800378e <UART_SetConfig+0x27e>
 80036ca:	2310      	movs	r3, #16
 80036cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d0:	e05d      	b.n	800378e <UART_SetConfig+0x27e>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4b      	ldr	r2, [pc, #300]	@ (8003804 <UART_SetConfig+0x2f4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d125      	bne.n	8003728 <UART_SetConfig+0x218>
 80036dc:	4b46      	ldr	r3, [pc, #280]	@ (80037f8 <UART_SetConfig+0x2e8>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036e8:	d016      	beq.n	8003718 <UART_SetConfig+0x208>
 80036ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80036ec:	d818      	bhi.n	8003720 <UART_SetConfig+0x210>
 80036ee:	2b80      	cmp	r3, #128	@ 0x80
 80036f0:	d00a      	beq.n	8003708 <UART_SetConfig+0x1f8>
 80036f2:	2b80      	cmp	r3, #128	@ 0x80
 80036f4:	d814      	bhi.n	8003720 <UART_SetConfig+0x210>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <UART_SetConfig+0x1f0>
 80036fa:	2b40      	cmp	r3, #64	@ 0x40
 80036fc:	d008      	beq.n	8003710 <UART_SetConfig+0x200>
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x210>
 8003700:	2300      	movs	r3, #0
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e042      	b.n	800378e <UART_SetConfig+0x27e>
 8003708:	2302      	movs	r3, #2
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e03e      	b.n	800378e <UART_SetConfig+0x27e>
 8003710:	2304      	movs	r3, #4
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003716:	e03a      	b.n	800378e <UART_SetConfig+0x27e>
 8003718:	2308      	movs	r3, #8
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371e:	e036      	b.n	800378e <UART_SetConfig+0x27e>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003726:	e032      	b.n	800378e <UART_SetConfig+0x27e>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a30      	ldr	r2, [pc, #192]	@ (80037f0 <UART_SetConfig+0x2e0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12a      	bne.n	8003788 <UART_SetConfig+0x278>
 8003732:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <UART_SetConfig+0x2e8>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003738:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800373c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003740:	d01a      	beq.n	8003778 <UART_SetConfig+0x268>
 8003742:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003746:	d81b      	bhi.n	8003780 <UART_SetConfig+0x270>
 8003748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374c:	d00c      	beq.n	8003768 <UART_SetConfig+0x258>
 800374e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003752:	d815      	bhi.n	8003780 <UART_SetConfig+0x270>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <UART_SetConfig+0x250>
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375c:	d008      	beq.n	8003770 <UART_SetConfig+0x260>
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x270>
 8003760:	2300      	movs	r3, #0
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003766:	e012      	b.n	800378e <UART_SetConfig+0x27e>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376e:	e00e      	b.n	800378e <UART_SetConfig+0x27e>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003776:	e00a      	b.n	800378e <UART_SetConfig+0x27e>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377e:	e006      	b.n	800378e <UART_SetConfig+0x27e>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003786:	e002      	b.n	800378e <UART_SetConfig+0x27e>
 8003788:	2310      	movs	r3, #16
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	@ (80037f0 <UART_SetConfig+0x2e0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	f040 80a8 	bne.w	80038ea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800379a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d834      	bhi.n	800380c <UART_SetConfig+0x2fc>
 80037a2:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <UART_SetConfig+0x298>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	0800380d 	.word	0x0800380d
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	080037db 	.word	0x080037db
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	0800380d 	.word	0x0800380d
 80037c4:	0800380d 	.word	0x0800380d
 80037c8:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7fe fac6 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d2:	e021      	b.n	8003818 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <UART_SetConfig+0x2f8>)
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037d8:	e01e      	b.n	8003818 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe fa51 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80037de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037e0:	e01a      	b.n	8003818 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037e8:	e016      	b.n	8003818 <UART_SetConfig+0x308>
 80037ea:	bf00      	nop
 80037ec:	cfff69f3 	.word	0xcfff69f3
 80037f0:	40008000 	.word	0x40008000
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003816:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 812a 	beq.w	8003a74 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	4a9e      	ldr	r2, [pc, #632]	@ (8003aa0 <UART_SetConfig+0x590>)
 8003826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382a:	461a      	mov	r2, r3
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003832:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	d305      	bcc.n	8003850 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d903      	bls.n	8003858 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003856:	e10d      	b.n	8003a74 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	2200      	movs	r2, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	4a8e      	ldr	r2, [pc, #568]	@ (8003aa0 <UART_SetConfig+0x590>)
 8003866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386a:	b29b      	uxth	r3, r3
 800386c:	2200      	movs	r2, #0
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800387a:	f7fc fccd 	bl	8000218 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	020b      	lsls	r3, r1, #8
 8003890:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003894:	0202      	lsls	r2, r0, #8
 8003896:	6979      	ldr	r1, [r7, #20]
 8003898:	6849      	ldr	r1, [r1, #4]
 800389a:	0849      	lsrs	r1, r1, #1
 800389c:	2000      	movs	r0, #0
 800389e:	460c      	mov	r4, r1
 80038a0:	4605      	mov	r5, r0
 80038a2:	eb12 0804 	adds.w	r8, r2, r4
 80038a6:	eb43 0905 	adc.w	r9, r3, r5
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	469a      	mov	sl, r3
 80038b2:	4693      	mov	fp, r2
 80038b4:	4652      	mov	r2, sl
 80038b6:	465b      	mov	r3, fp
 80038b8:	4640      	mov	r0, r8
 80038ba:	4649      	mov	r1, r9
 80038bc:	f7fc fcac 	bl	8000218 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ce:	d308      	bcc.n	80038e2 <UART_SetConfig+0x3d2>
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d6:	d204      	bcs.n	80038e2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e0c8      	b.n	8003a74 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038e8:	e0c4      	b.n	8003a74 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f2:	d167      	bne.n	80039c4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80038f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d828      	bhi.n	800394e <UART_SetConfig+0x43e>
 80038fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <UART_SetConfig+0x3f4>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003929 	.word	0x08003929
 8003908:	08003931 	.word	0x08003931
 800390c:	08003939 	.word	0x08003939
 8003910:	0800394f 	.word	0x0800394f
 8003914:	0800393f 	.word	0x0800393f
 8003918:	0800394f 	.word	0x0800394f
 800391c:	0800394f 	.word	0x0800394f
 8003920:	0800394f 	.word	0x0800394f
 8003924:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7fe fa18 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 800392c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800392e:	e014      	b.n	800395a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7fe fa2a 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8003934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003936:	e010      	b.n	800395a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa4 <UART_SetConfig+0x594>)
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800393c:	e00d      	b.n	800395a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7fe f99f 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8003942:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003944:	e009      	b.n	800395a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800394c:	e005      	b.n	800395a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8089 	beq.w	8003a74 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa0 <UART_SetConfig+0x590>)
 8003968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800396c:	461a      	mov	r2, r3
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	fbb3 f3f2 	udiv	r3, r3, r2
 8003974:	005a      	lsls	r2, r3, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	441a      	add	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d916      	bls.n	80039bc <UART_SetConfig+0x4ac>
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d212      	bcs.n	80039bc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f023 030f 	bic.w	r3, r3, #15
 800399e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	8bfb      	ldrh	r3, [r7, #30]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	8bfa      	ldrh	r2, [r7, #30]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	e05b      	b.n	8003a74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039c2:	e057      	b.n	8003a74 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d828      	bhi.n	8003a1e <UART_SetConfig+0x50e>
 80039cc:	a201      	add	r2, pc, #4	@ (adr r2, 80039d4 <UART_SetConfig+0x4c4>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe f9b0 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 80039fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039fe:	e014      	b.n	8003a2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe f9c2 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8003a04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a06:	e010      	b.n	8003a2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <UART_SetConfig+0x594>)
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a0c:	e00d      	b.n	8003a2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7fe f937 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8003a12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a14:	e009      	b.n	8003a2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a1c:	e005      	b.n	8003a2a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a28:	bf00      	nop
    }

    if (pclk != 0U)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d021      	beq.n	8003a74 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <UART_SetConfig+0x590>)
 8003a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	441a      	add	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d909      	bls.n	8003a6e <UART_SetConfig+0x55e>
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a60:	d205      	bcs.n	8003a6e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	e002      	b.n	8003a74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3730      	adds	r7, #48	@ 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800417c 	.word	0x0800417c
 8003aa4:	00f42400 	.word	0x00f42400

08003aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01a      	beq.n	8003bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba6:	d10a      	bne.n	8003bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b098      	sub	sp, #96	@ 0x60
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bfc:	f7fd f8b4 	bl	8000d68 <HAL_GetTick>
 8003c00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d12f      	bne.n	8003c70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f88e 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d022      	beq.n	8003c70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e063      	b.n	8003d38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d149      	bne.n	8003d12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	2200      	movs	r2, #0
 8003c88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f857 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d03c      	beq.n	8003d12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cea:	61fa      	str	r2, [r7, #28]
 8003cec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e012      	b.n	8003d38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3758      	adds	r7, #88	@ 0x58
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d50:	e04f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d04b      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fd f805 	bl	8000d68 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e04e      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d037      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	d034      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d031      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d110      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f838 	bl	8003e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2208      	movs	r2, #8
 8003dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e029      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dcc:	d111      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f81e 	bl	8003e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e00f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d0a0      	beq.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b095      	sub	sp, #84	@ 0x54
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e6      	bne.n	8003e94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	@ 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_UARTEx_DisableFifoMode+0x16>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e027      	b.n	8003f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	@ 0x24
 8003f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e02d      	b.n	8003fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f84f 	bl	8004050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e02d      	b.n	8004048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	@ 0x24
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f811 	bl	8004050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800405c:	2b00      	cmp	r3, #0
 800405e:	d108      	bne.n	8004072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004070:	e031      	b.n	80040d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004072:	2308      	movs	r3, #8
 8004074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004076:	2308      	movs	r3, #8
 8004078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	0e5b      	lsrs	r3, r3, #25
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	0f5b      	lsrs	r3, r3, #29
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800409a:	7bbb      	ldrb	r3, [r7, #14]
 800409c:	7b3a      	ldrb	r2, [r7, #12]
 800409e:	4911      	ldr	r1, [pc, #68]	@ (80040e4 <UARTEx_SetNbDataToProcess+0x94>)
 80040a0:	5c8a      	ldrb	r2, [r1, r2]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80040a6:	7b3a      	ldrb	r2, [r7, #12]
 80040a8:	490f      	ldr	r1, [pc, #60]	@ (80040e8 <UARTEx_SetNbDataToProcess+0x98>)
 80040aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	7b7a      	ldrb	r2, [r7, #13]
 80040bc:	4909      	ldr	r1, [pc, #36]	@ (80040e4 <UARTEx_SetNbDataToProcess+0x94>)
 80040be:	5c8a      	ldrb	r2, [r1, r2]
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80040c4:	7b7a      	ldrb	r2, [r7, #13]
 80040c6:	4908      	ldr	r1, [pc, #32]	@ (80040e8 <UARTEx_SetNbDataToProcess+0x98>)
 80040c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	08004194 	.word	0x08004194
 80040e8:	0800419c 	.word	0x0800419c

080040ec <memset>:
 80040ec:	4402      	add	r2, r0
 80040ee:	4603      	mov	r3, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	f803 1b01 	strb.w	r1, [r3], #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004134 <__libc_init_array+0x38>)
 8004100:	4c0d      	ldr	r4, [pc, #52]	@ (8004138 <__libc_init_array+0x3c>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	2600      	movs	r6, #0
 8004108:	42a6      	cmp	r6, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	4d0b      	ldr	r5, [pc, #44]	@ (800413c <__libc_init_array+0x40>)
 800410e:	4c0c      	ldr	r4, [pc, #48]	@ (8004140 <__libc_init_array+0x44>)
 8004110:	f000 f818 	bl	8004144 <_init>
 8004114:	1b64      	subs	r4, r4, r5
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	2600      	movs	r6, #0
 800411a:	42a6      	cmp	r6, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	f855 3b04 	ldr.w	r3, [r5], #4
 8004124:	4798      	blx	r3
 8004126:	3601      	adds	r6, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	f855 3b04 	ldr.w	r3, [r5], #4
 800412e:	4798      	blx	r3
 8004130:	3601      	adds	r6, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	080041ac 	.word	0x080041ac
 8004138:	080041ac 	.word	0x080041ac
 800413c:	080041ac 	.word	0x080041ac
 8004140:	080041b0 	.word	0x080041b0

08004144 <_init>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

08004150 <_fini>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr
