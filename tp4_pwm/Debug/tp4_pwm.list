
tp4_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004098  08004098  00005098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d8  080040d8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040e0  080040e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e0  080040e0  000050e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080040f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080040f4  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001201c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263c  00000000  00000000  00018058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c74  00000000  00000000  0001b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd32  00000000  00000000  0001c30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a93  00000000  00000000  0003a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2143  00000000  00000000  0004dad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fc14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  0010fc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00113f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004080 	.word	0x08004080

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004080 	.word	0x08004080

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_GPIO_Init+0x74>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a16      	ldr	r2, [pc, #88]	@ (800057c <MX_GPIO_Init+0x74>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <MX_GPIO_Init+0x74>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_GPIO_Init+0x74>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <MX_GPIO_Init+0x74>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_GPIO_Init+0x74>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000554:	f000 fe18 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_Pin;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000570:	f000 fc88 	bl	8000e84 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb27 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f834 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f7ff ffba 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa54 	bl	8000a40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000598:	f000 f948 	bl	800082c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4814      	ldr	r0, [pc, #80]	@ (80005f0 <main+0x6c>)
 80005a0:	f001 fe94 	bl	80022cc <HAL_TIM_PWM_Start>
  PWM_write(&htim1, TIM_CHANNEL_1, 1);
 80005a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a8:	2100      	movs	r1, #0
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <main+0x6c>)
 80005ac:	f000 f875 	bl	800069a <PWM_write>
  PWM_dir(0);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f8c3 	bl	800073c <PWM_dir>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.75);
 80005b6:	eeb6 0a08 	vmov.f32	s0, #104	@ 0x3f400000  0.750
 80005ba:	2100      	movs	r1, #0
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <main+0x6c>)
 80005be:	f000 f86c 	bl	800069a <PWM_write>
  PWM_dir(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 f8ba 	bl	800073c <PWM_dir>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.5);
 80005c8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80005cc:	2100      	movs	r1, #0
 80005ce:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <main+0x6c>)
 80005d0:	f000 f863 	bl	800069a <PWM_write>
  PWM_write(&htim1, TIM_CHANNEL_1, 0.25);
 80005d4:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80005d8:	2100      	movs	r1, #0
 80005da:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <main+0x6c>)
 80005dc:	f000 f85d 	bl	800069a <PWM_write>
  PWM_write(&htim1, TIM_CHANNEL_1, 0);
 80005e0:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80005f4 <main+0x70>
 80005e4:	2100      	movs	r1, #0
 80005e6:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <main+0x6c>)
 80005e8:	f000 f857 	bl	800069a <PWM_write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x68>
 80005f0:	20000028 	.word	0x20000028
 80005f4:	00000000 	.word	0x00000000

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2238      	movs	r2, #56	@ 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fd0e 	bl	8004028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fdcc 	bl	80011b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2340      	movs	r3, #64	@ 0x40
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000636:	2304      	movs	r3, #4
 8000638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fe66 	bl	8001320 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065a:	f000 f818 	bl	800068e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2303      	movs	r3, #3
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2104      	movs	r1, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f964 	bl	8001944 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000682:	f000 f804 	bl	800068e <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000692:	b672      	cpsid	i
}
 8000694:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <Error_Handler+0x8>

0800069a <PWM_write>:
 */
#include "pwm_api.h"


void PWM_write(TIM_HandleTypeDef *htim, uint32_t pwm_channel, float duty_cycle)
{
 800069a:	b480      	push	{r7}
 800069c:	b087      	sub	sp, #28
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ae:	617b      	str	r3, [r7, #20]
    uint32_t CRR = duty_cycle*(ARR+1)-1;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	3301      	adds	r3, #1
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d0:	ee17 3a90 	vmov	r3, s15
 80006d4:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <PWM_write+0x4c>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80006e4:	e023      	b.n	800072e <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d104      	bne.n	80006f6 <PWM_write+0x5c>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80006f4:	e01b      	b.n	800072e <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b08      	cmp	r3, #8
 80006fa:	d104      	bne.n	8000706 <PWM_write+0x6c>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000704:	e013      	b.n	800072e <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b0c      	cmp	r3, #12
 800070a:	d104      	bne.n	8000716 <PWM_write+0x7c>
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000714:	e00b      	b.n	800072e <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2b10      	cmp	r3, #16
 800071a:	d104      	bne.n	8000726 <PWM_write+0x8c>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8000724:	e003      	b.n	800072e <PWM_write+0x94>
    __HAL_TIM_SET_COMPARE(htim,pwm_channel,CRR);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800072e:	bf00      	nop
 8000730:	371c      	adds	r7, #28
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <PWM_dir>:
void PWM_dir(int dir)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, dir);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2140      	movs	r1, #64	@ 0x40
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <PWM_dir+0x20>)
 800074e:	f000 fd1b 	bl	8001188 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	48000400 	.word	0x48000400

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x44>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6613      	str	r3, [r2, #96]	@ 0x60
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_MspInit+0x44>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000788:	6593      	str	r3, [r2, #88]	@ 0x58
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000796:	f000 fdb3 	bl	8001300 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fe:	f000 fa3f 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b09c      	sub	sp, #112	@ 0x70
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2234      	movs	r2, #52	@ 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fbde 	bl	8004028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800086c:	4b46      	ldr	r3, [pc, #280]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800086e:	4a47      	ldr	r2, [pc, #284]	@ (800098c <MX_TIM1_Init+0x160>)
 8000870:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000872:	4b45      	ldr	r3, [pc, #276]	@ (8000988 <MX_TIM1_Init+0x15c>)
 8000874:	2201      	movs	r2, #1
 8000876:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8500;
 800087e:	4b42      	ldr	r3, [pc, #264]	@ (8000988 <MX_TIM1_Init+0x15c>)
 8000880:	f242 1234 	movw	r2, #8500	@ 0x2134
 8000884:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b40      	ldr	r3, [pc, #256]	@ (8000988 <MX_TIM1_Init+0x15c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800088c:	4b3e      	ldr	r3, [pc, #248]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b3d      	ldr	r3, [pc, #244]	@ (8000988 <MX_TIM1_Init+0x15c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000898:	483b      	ldr	r0, [pc, #236]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800089a:	f001 fc5f 	bl	800215c <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f7ff fef3 	bl	800068e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008b2:	4619      	mov	r1, r3
 80008b4:	4834      	ldr	r0, [pc, #208]	@ (8000988 <MX_TIM1_Init+0x15c>)
 80008b6:	f001 ff1d 	bl	80026f4 <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008c0:	f7ff fee5 	bl	800068e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c4:	4830      	ldr	r0, [pc, #192]	@ (8000988 <MX_TIM1_Init+0x15c>)
 80008c6:	f001 fca0 	bl	800220a <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008d0:	f7ff fedd 	bl	800068e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008e4:	4619      	mov	r1, r3
 80008e6:	4828      	ldr	r0, [pc, #160]	@ (8000988 <MX_TIM1_Init+0x15c>)
 80008e8:	f002 fc52 	bl	8003190 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008f2:	f7ff fecc 	bl	800068e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	@ 0x60
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4249;
 80008fa:	f241 0399 	movw	r3, #4249	@ 0x1099
 80008fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	481a      	ldr	r0, [pc, #104]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800091e:	f001 fdd5 	bl	80024cc <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000928:	f7ff feb1 	bl	800068e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800096a:	f002 fc93 	bl	8003294 <HAL_TIMEx_ConfigBreakDeadTime>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000974:	f7ff fe8b 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <MX_TIM1_Init+0x15c>)
 800097a:	f000 f829 	bl	80009d0 <HAL_TIM_MspPostInit>

}
 800097e:	bf00      	nop
 8000980:	3770      	adds	r7, #112	@ 0x70
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000028 	.word	0x20000028
 800098c:	40012c00 	.word	0x40012c00

08000990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <HAL_TIM_Base_MspInit+0x38>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10b      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_TIM_Base_MspInit+0x3c>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	4a09      	ldr	r2, [pc, #36]	@ (80009cc <HAL_TIM_Base_MspInit+0x3c>)
 80009a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <HAL_TIM_Base_MspInit+0x3c>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40012c00 	.word	0x40012c00
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <HAL_TIM_MspPostInit+0x68>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d11d      	bne.n	8000a2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_TIM_MspPostInit+0x6c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <HAL_TIM_MspPostInit+0x6c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_TIM_MspPostInit+0x6c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f000 fa2b 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	40021000 	.word	0x40021000

08000a40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a8a:	f002 fc8f 	bl	80033ac <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a94:	f7ff fdfb 	bl	800068e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a9c:	f003 f9fa 	bl	8003e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f7ff fdf2 	bl	800068e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000aae:	f003 fa2f 	bl	8003f10 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f7ff fde9 	bl	800068e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000abe:	f003 f9b0 	bl	8003e22 <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f7ff fde1 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000074 	.word	0x20000074
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09a      	sub	sp, #104	@ 0x68
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2244      	movs	r2, #68	@ 0x44
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fa95 	bl	8004028 <memset>
  if(uartHandle->Instance==USART2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1f      	ldr	r2, [pc, #124]	@ (8000b80 <HAL_UART_MspInit+0xa8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d136      	bne.n	8000b76 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 f931 	bl	8001d7c <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff fdb5 	bl	800068e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b28:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b64:	2307      	movs	r3, #7
 8000b66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f000 f987 	bl	8000e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3768      	adds	r7, #104	@ 0x68
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff fe3c 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f003 fa3f 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fce3 	bl	8000584 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	080040e8 	.word	0x080040e8
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	2000010c 	.word	0x2000010c

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f91b 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff fdb0 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d022      	beq.n	8000c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_InitTick+0x6c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f918 	bl	8000e6a <HAL_SYSTICK_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10f      	bne.n	8000c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d809      	bhi.n	8000c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4e:	f000 f8f2 	bl	8000e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_InitTick+0x70>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e004      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	@ (8000c9c <HAL_IncTick+0x1c>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000108 	.word	0x20000108
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000108 	.word	0x20000108

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff47 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff5e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffb2 	bl	8000ddc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e92:	e15a      	b.n	800114a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 814c 	beq.w	8001144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	f003 0201 	and.w	r2, r3, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d123      	bne.n	8000fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	6939      	ldr	r1, [r7, #16]
 8000fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0203 	and.w	r2, r3, #3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80a6 	beq.w	8001144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8001168 <HAL_GPIO_Init+0x2e4>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8001168 <HAL_GPIO_Init+0x2e4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6613      	str	r3, [r2, #96]	@ 0x60
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <HAL_GPIO_Init+0x2e4>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001010:	4a56      	ldr	r2, [pc, #344]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800103a:	d01f      	beq.n	800107c <HAL_GPIO_Init+0x1f8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <HAL_GPIO_Init+0x2ec>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d019      	beq.n	8001078 <HAL_GPIO_Init+0x1f4>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a4b      	ldr	r2, [pc, #300]	@ (8001174 <HAL_GPIO_Init+0x2f0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d013      	beq.n	8001074 <HAL_GPIO_Init+0x1f0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4a      	ldr	r2, [pc, #296]	@ (8001178 <HAL_GPIO_Init+0x2f4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a49      	ldr	r2, [pc, #292]	@ (800117c <HAL_GPIO_Init+0x2f8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1e8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a48      	ldr	r2, [pc, #288]	@ (8001180 <HAL_GPIO_Init+0x2fc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001064:	2305      	movs	r3, #5
 8001066:	e00a      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001068:	2306      	movs	r3, #6
 800106a:	e008      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 800106c:	2304      	movs	r3, #4
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001070:	2303      	movs	r3, #3
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 800107c:	2300      	movs	r3, #0
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108e:	4937      	ldr	r1, [pc, #220]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	4b39      	ldr	r3, [pc, #228]	@ (8001184 <HAL_GPIO_Init+0x300>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c0:	4a30      	ldr	r2, [pc, #192]	@ (8001184 <HAL_GPIO_Init+0x300>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <HAL_GPIO_Init+0x300>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ea:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <HAL_GPIO_Init+0x300>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_GPIO_Init+0x300>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <HAL_GPIO_Init+0x300>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <HAL_GPIO_Init+0x300>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113e:	4a11      	ldr	r2, [pc, #68]	@ (8001184 <HAL_GPIO_Init+0x300>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f ae9d 	bne.w	8000e94 <HAL_GPIO_Init+0x10>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	48001400 	.word	0x48001400
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d141      	bne.n	800124a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c6:	4b4b      	ldr	r3, [pc, #300]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d2:	d131      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d4:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011da:	4a46      	ldr	r2, [pc, #280]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ec:	4a41      	ldr	r2, [pc, #260]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f4:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2232      	movs	r2, #50	@ 0x32
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a3f      	ldr	r2, [pc, #252]	@ (80012fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800120a:	e002      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3b01      	subs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001212:	4b38      	ldr	r3, [pc, #224]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800121a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121e:	d102      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f2      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001226:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001232:	d158      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e057      	b.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800123e:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001248:	e04d      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001250:	d141      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125e:	d131      	bne.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001266:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001278:	4a1e      	ldr	r2, [pc, #120]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2232      	movs	r2, #50	@ 0x32
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	0c9b      	lsrs	r3, r3, #18
 8001292:	3301      	adds	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001296:	e002      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3b01      	subs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012aa:	d102      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f2      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012be:	d112      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e011      	b.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012d4:	e007      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012de:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40007000 	.word	0x40007000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	431bde83 	.word	0x431bde83

08001300 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130e:	6093      	str	r3, [r2, #8]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40007000 	.word	0x40007000

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e2fe      	b.n	8001930 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d075      	beq.n	800142a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4b97      	ldr	r3, [pc, #604]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001348:	4b94      	ldr	r3, [pc, #592]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x3e>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d002      	beq.n	8001364 <HAL_RCC_OscConfig+0x44>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d10b      	bne.n	800137c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	4b8d      	ldr	r3, [pc, #564]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d05b      	beq.n	8001428 <HAL_RCC_OscConfig+0x108>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d157      	bne.n	8001428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e2d9      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001384:	d106      	bne.n	8001394 <HAL_RCC_OscConfig+0x74>
 8001386:	4b85      	ldr	r3, [pc, #532]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a84      	ldr	r2, [pc, #528]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xb0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x98>
 800139e:	4b7f      	ldr	r3, [pc, #508]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7e      	ldr	r2, [pc, #504]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b7c      	ldr	r3, [pc, #496]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a7b      	ldr	r2, [pc, #492]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xb0>
 80013b8:	4b78      	ldr	r3, [pc, #480]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a77      	ldr	r2, [pc, #476]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b75      	ldr	r3, [pc, #468]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a74      	ldr	r2, [pc, #464]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc64 	bl	8000ca4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fc60 	bl	8000ca4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	@ 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e29e      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f2:	4b6a      	ldr	r3, [pc, #424]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xc0>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc50 	bl	8000ca4 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc4c 	bl	8000ca4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e28a      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141a:	4b60      	ldr	r3, [pc, #384]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0xe8>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d075      	beq.n	8001522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b59      	ldr	r3, [pc, #356]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	4b56      	ldr	r3, [pc, #344]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d102      	bne.n	8001456 <HAL_RCC_OscConfig+0x136>
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d002      	beq.n	800145c <HAL_RCC_OscConfig+0x13c>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d11f      	bne.n	800149c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145c:	4b4f      	ldr	r3, [pc, #316]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x154>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e25d      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b49      	ldr	r3, [pc, #292]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	4946      	ldr	r1, [pc, #280]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001488:	4b45      	ldr	r3, [pc, #276]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbbd 	bl	8000c0c <HAL_InitTick>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d043      	beq.n	8001520 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e249      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b3d      	ldr	r3, [pc, #244]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a3c      	ldr	r2, [pc, #240]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fbf8 	bl	8000ca4 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fbf4 	bl	8000ca4 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e232      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ca:	4b34      	ldr	r3, [pc, #208]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	061b      	lsls	r3, r3, #24
 80014e4:	492d      	ldr	r1, [pc, #180]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
 80014ea:	e01a      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2a      	ldr	r2, [pc, #168]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 80014f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fbd4 	bl	8000ca4 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fbd0 	bl	8000ca4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e20e      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1e0>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d041      	beq.n	80015b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01c      	beq.n	8001570 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fbad 	bl	8000ca4 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff fba9 	bl	8000ca4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1e7      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ef      	beq.n	800154e <HAL_RCC_OscConfig+0x22e>
 800156e:	e020      	b.n	80015b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <HAL_RCC_OscConfig+0x27c>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fb90 	bl	8000ca4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001586:	e00d      	b.n	80015a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fb8c 	bl	8000ca4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d906      	bls.n	80015a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1ca      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a4:	4b8c      	ldr	r3, [pc, #560]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ea      	bne.n	8001588 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80a6 	beq.w	800170c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015c4:	4b84      	ldr	r3, [pc, #528]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2b4>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x2b6>
 80015d4:	2300      	movs	r3, #0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00d      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b7f      	ldr	r3, [pc, #508]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	4a7e      	ldr	r2, [pc, #504]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e6:	4b7c      	ldr	r3, [pc, #496]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f6:	4b79      	ldr	r3, [pc, #484]	@ (80017dc <HAL_RCC_OscConfig+0x4bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001602:	4b76      	ldr	r3, [pc, #472]	@ (80017dc <HAL_RCC_OscConfig+0x4bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a75      	ldr	r2, [pc, #468]	@ (80017dc <HAL_RCC_OscConfig+0x4bc>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb49 	bl	8000ca4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fb45 	bl	8000ca4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e183      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001628:	4b6c      	ldr	r3, [pc, #432]	@ (80017dc <HAL_RCC_OscConfig+0x4bc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_RCC_OscConfig+0x32e>
 800163c:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001642:	4a65      	ldr	r2, [pc, #404]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164c:	e024      	b.n	8001698 <HAL_RCC_OscConfig+0x378>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d110      	bne.n	8001678 <HAL_RCC_OscConfig+0x358>
 8001656:	4b60      	ldr	r3, [pc, #384]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165c:	4a5e      	ldr	r2, [pc, #376]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001666:	4b5c      	ldr	r3, [pc, #368]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	4a5a      	ldr	r2, [pc, #360]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001676:	e00f      	b.n	8001698 <HAL_RCC_OscConfig+0x378>
 8001678:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a56      	ldr	r2, [pc, #344]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a52      	ldr	r2, [pc, #328]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d016      	beq.n	80016ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb00 	bl	8000ca4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff fafc 	bl	8000ca4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e138      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016be:	4b46      	ldr	r3, [pc, #280]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ed      	beq.n	80016a8 <HAL_RCC_OscConfig+0x388>
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff fae9 	bl	8000ca4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff fae5 	bl	8000ca4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e121      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ec:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ed      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016fa:	7ffb      	ldrb	r3, [r7, #31]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001700:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	4a34      	ldr	r2, [pc, #208]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b00      	cmp	r3, #0
 8001716:	d03c      	beq.n	8001792 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01c      	beq.n	800175a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001726:	4a2c      	ldr	r2, [pc, #176]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fab8 	bl	8000ca4 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001738:	f7ff fab4 	bl	8000ca4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0f2      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800174c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ef      	beq.n	8001738 <HAL_RCC_OscConfig+0x418>
 8001758:	e01b      	b.n	8001792 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800175c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001760:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fa9b 	bl	8000ca4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001772:	f7ff fa97 	bl	8000ca4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0d5      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ef      	bne.n	8001772 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80c9 	beq.w	800192e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800179c:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	f000 8083 	beq.w	80018b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d15e      	bne.n	8001870 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff fa71 	bl	8000ca4 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c4:	e00c      	b.n	80017e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fa6d 	bl	8000ca4 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d905      	bls.n	80017e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0ab      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e0:	4b55      	ldr	r3, [pc, #340]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ec      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ec:	4b52      	ldr	r3, [pc, #328]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4b52      	ldr	r3, [pc, #328]	@ (800193c <HAL_RCC_OscConfig+0x61c>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6a11      	ldr	r1, [r2, #32]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017fc:	3a01      	subs	r2, #1
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001806:	0212      	lsls	r2, r2, #8
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800180e:	0852      	lsrs	r2, r2, #1
 8001810:	3a01      	subs	r2, #1
 8001812:	0552      	lsls	r2, r2, #21
 8001814:	4311      	orrs	r1, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800181a:	0852      	lsrs	r2, r2, #1
 800181c:	3a01      	subs	r2, #1
 800181e:	0652      	lsls	r2, r2, #25
 8001820:	4311      	orrs	r1, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001826:	06d2      	lsls	r2, r2, #27
 8001828:	430a      	orrs	r2, r1
 800182a:	4943      	ldr	r1, [pc, #268]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a40      	ldr	r2, [pc, #256]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800183c:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a3d      	ldr	r2, [pc, #244]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001846:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fa2c 	bl	8000ca4 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fa28 	bl	8000ca4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e066      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x530>
 800186e:	e05e      	b.n	800192e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a30      	ldr	r2, [pc, #192]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800187a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fa12 	bl	8000ca4 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fa0e 	bl	8000ca4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04c      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001896:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018a2:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	4924      	ldr	r1, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
 80018ae:	e03e      	b.n	800192e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e039      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <HAL_RCC_OscConfig+0x618>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d12c      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	3b01      	subs	r3, #1
 80018dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d123      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d11b      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d113      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d109      	bne.n	800192a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	3b01      	subs	r3, #1
 8001924:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	019f800c 	.word	0x019f800c
 8001940:	feeefffc 	.word	0xfeeefffc

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e11e      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b91      	ldr	r3, [pc, #580]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d910      	bls.n	800198c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 020f 	bic.w	r2, r3, #15
 8001972:	498c      	ldr	r1, [pc, #560]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e106      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d073      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d129      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a0:	4b81      	ldr	r3, [pc, #516]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0f4      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019b0:	f000 f99e 	bl	8001cf0 <RCC_GetSysClockFreqFromPLLSource>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4a7c      	ldr	r2, [pc, #496]	@ (8001bac <HAL_RCC_ClockConfig+0x268>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d93f      	bls.n	8001a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019be:	4b7a      	ldr	r3, [pc, #488]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d033      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d12f      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019de:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019e6:	4a70      	ldr	r2, [pc, #448]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e024      	b.n	8001a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0c6      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0be      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a1c:	f000 f8ce 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4a61      	ldr	r2, [pc, #388]	@ (8001bac <HAL_RCC_ClockConfig+0x268>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d909      	bls.n	8001a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a32:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4957      	ldr	r1, [pc, #348]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a50:	f7ff f928 	bl	8000ca4 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f924 	bl	8000ca4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e095      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b43      	ldr	r3, [pc, #268]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001aba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4936      	ldr	r1, [pc, #216]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b80      	cmp	r3, #128	@ 0x80
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ada:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4a32      	ldr	r2, [pc, #200]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001ae0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d21d      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 020f 	bic.w	r2, r3, #15
 8001afc:	4929      	ldr	r1, [pc, #164]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b04:	f7ff f8ce 	bl	8000ca4 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff f8ca 	bl	8000ca4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e03b      	b.n	8001b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1ed      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4917      	ldr	r1, [pc, #92]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490f      	ldr	r1, [pc, #60]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b6e:	f000 f825 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <HAL_RCC_ClockConfig+0x264>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490c      	ldr	r1, [pc, #48]	@ (8001bb0 <HAL_RCC_ClockConfig+0x26c>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <HAL_RCC_ClockConfig+0x270>)
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_RCC_ClockConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f83a 	bl	8000c0c <HAL_InitTick>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	04c4b400 	.word	0x04c4b400
 8001bb0:	08004098 	.word	0x08004098
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e047      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	e03e      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d136      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d10c      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c10:	4a1a      	ldr	r2, [pc, #104]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	68d2      	ldr	r2, [r2, #12]
 8001c1c:	0a12      	lsrs	r2, r2, #8
 8001c1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
      break;
 8001c28:	e00c      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2a:	4a13      	ldr	r2, [pc, #76]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c34:	68d2      	ldr	r2, [r2, #12]
 8001c36:	0a12      	lsrs	r2, r2, #8
 8001c38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
      break;
 8001c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0e5b      	lsrs	r3, r3, #25
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e001      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c64:	693b      	ldr	r3, [r7, #16]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c9c:	f7ff fff0 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4904      	ldr	r1, [pc, #16]	@ (8001cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	080040a8 	.word	0x080040a8

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cc8:	f7ff ffda 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4904      	ldr	r1, [pc, #16]	@ (8001cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	080040a8 	.word	0x080040a8

08001cf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d10c      	bne.n	8001d2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d14:	4a17      	ldr	r2, [pc, #92]	@ (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d1e:	68d2      	ldr	r2, [r2, #12]
 8001d20:	0a12      	lsrs	r2, r2, #8
 8001d22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
    break;
 8001d2c:	e00c      	b.n	8001d48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	0a12      	lsrs	r2, r2, #8
 8001d3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    break;
 8001d46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0e5b      	lsrs	r3, r3, #25
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	007a1200 	.word	0x007a1200
 8001d78:	00f42400 	.word	0x00f42400

08001d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d84:	2300      	movs	r3, #0
 8001d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8098 	beq.w	8001eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a39      	ldr	r2, [pc, #228]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe ff67 	bl	8000ca4 <HAL_GetTick>
 8001dd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd8:	e009      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7fe ff63 	bl	8000ca4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d902      	bls.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	74fb      	strb	r3, [r7, #19]
        break;
 8001dec:	e005      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0ef      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d159      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e00:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01e      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d019      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e28:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e38:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ff23 	bl	8000ca4 <HAL_GetTick>
 8001e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e60:	e00b      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe ff1f 	bl	8000ca4 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d902      	bls.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	74fb      	strb	r3, [r7, #19]
            break;
 8001e78:	e006      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ec      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8e:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	4903      	ldr	r1, [pc, #12]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	74bb      	strb	r3, [r7, #18]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb8:	7c7b      	ldrb	r3, [r7, #17]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4ba6      	ldr	r3, [pc, #664]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4aa5      	ldr	r2, [pc, #660]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed6:	4ba0      	ldr	r3, [pc, #640]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001edc:	f023 0203 	bic.w	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	499c      	ldr	r1, [pc, #624]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef8:	4b97      	ldr	r3, [pc, #604]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	f023 020c 	bic.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4994      	ldr	r1, [pc, #592]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	498b      	ldr	r1, [pc, #556]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f3c:	4b86      	ldr	r3, [pc, #536]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	4983      	ldr	r1, [pc, #524]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f5e:	4b7e      	ldr	r3, [pc, #504]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	497a      	ldr	r1, [pc, #488]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f80:	4b75      	ldr	r3, [pc, #468]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4972      	ldr	r1, [pc, #456]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4969      	ldr	r1, [pc, #420]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fc4:	4b64      	ldr	r3, [pc, #400]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4961      	ldr	r1, [pc, #388]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	4958      	ldr	r1, [pc, #352]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	4950      	ldr	r1, [pc, #320]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002026:	d105      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002028:	4b4b      	ldr	r3, [pc, #300]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a4a      	ldr	r2, [pc, #296]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002032:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002040:	4b45      	ldr	r3, [pc, #276]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	4942      	ldr	r1, [pc, #264]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800205e:	d105      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002060:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a3c      	ldr	r2, [pc, #240]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800206a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002078:	4b37      	ldr	r3, [pc, #220]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4934      	ldr	r1, [pc, #208]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020be:	4926      	ldr	r1, [pc, #152]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ce:	d105      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f6:	4918      	ldr	r1, [pc, #96]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002112:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002120:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212e:	490a      	ldr	r1, [pc, #40]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800213e:	d105      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800214c:	7cbb      	ldrb	r3, [r7, #18]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e049      	b.n	8002202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fc04 	bl	8000990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 fba4 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e049      	b.n	80022b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f841 	bl	80022b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f000 fb4d 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_TIM_PWM_Start+0x24>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e03c      	b.n	800236a <HAL_TIM_PWM_Start+0x9e>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d109      	bne.n	800230a <HAL_TIM_PWM_Start+0x3e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e02f      	b.n	800236a <HAL_TIM_PWM_Start+0x9e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d109      	bne.n	8002324 <HAL_TIM_PWM_Start+0x58>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e022      	b.n	800236a <HAL_TIM_PWM_Start+0x9e>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d109      	bne.n	800233e <HAL_TIM_PWM_Start+0x72>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e015      	b.n	800236a <HAL_TIM_PWM_Start+0x9e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d109      	bne.n	8002358 <HAL_TIM_PWM_Start+0x8c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e008      	b.n	800236a <HAL_TIM_PWM_Start+0x9e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e097      	b.n	80024a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Start+0xb6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002380:	e023      	b.n	80023ca <HAL_TIM_PWM_Start+0xfe>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0xc6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002390:	e01b      	b.n	80023ca <HAL_TIM_PWM_Start+0xfe>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0xd6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023a0:	e013      	b.n	80023ca <HAL_TIM_PWM_Start+0xfe>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start+0xe6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023b0:	e00b      	b.n	80023ca <HAL_TIM_PWM_Start+0xfe>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_PWM_Start+0xf6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023c0:	e003      	b.n	80023ca <HAL_TIM_PWM_Start+0xfe>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 feb6 	bl	8003144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <HAL_TIM_PWM_Start+0x1e0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_TIM_PWM_Start+0x13e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <HAL_TIM_PWM_Start+0x1e4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00e      	beq.n	800240a <HAL_TIM_PWM_Start+0x13e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a30      	ldr	r2, [pc, #192]	@ (80024b4 <HAL_TIM_PWM_Start+0x1e8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_TIM_PWM_Start+0x13e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <HAL_TIM_PWM_Start+0x1ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_TIM_PWM_Start+0x13e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2d      	ldr	r2, [pc, #180]	@ (80024bc <HAL_TIM_PWM_Start+0x1f0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_TIM_PWM_Start+0x142>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_TIM_PWM_Start+0x144>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002422:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a20      	ldr	r2, [pc, #128]	@ (80024ac <HAL_TIM_PWM_Start+0x1e0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d018      	beq.n	8002460 <HAL_TIM_PWM_Start+0x194>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002436:	d013      	beq.n	8002460 <HAL_TIM_PWM_Start+0x194>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a20      	ldr	r2, [pc, #128]	@ (80024c0 <HAL_TIM_PWM_Start+0x1f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00e      	beq.n	8002460 <HAL_TIM_PWM_Start+0x194>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <HAL_TIM_PWM_Start+0x1f8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d009      	beq.n	8002460 <HAL_TIM_PWM_Start+0x194>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_TIM_PWM_Start+0x1e4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d004      	beq.n	8002460 <HAL_TIM_PWM_Start+0x194>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <HAL_TIM_PWM_Start+0x1e8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d115      	bne.n	800248c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <HAL_TIM_PWM_Start+0x1fc>)
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b06      	cmp	r3, #6
 8002470:	d015      	beq.n	800249e <HAL_TIM_PWM_Start+0x1d2>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d011      	beq.n	800249e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248a:	e008      	b.n	800249e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e000      	b.n	80024a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40013400 	.word	0x40013400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800
 80024c8:	00010007 	.word	0x00010007

080024cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0ff      	b.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b14      	cmp	r3, #20
 80024f6:	f200 80f0 	bhi.w	80026da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002555 	.word	0x08002555
 8002504:	080026db 	.word	0x080026db
 8002508:	080026db 	.word	0x080026db
 800250c:	080026db 	.word	0x080026db
 8002510:	08002595 	.word	0x08002595
 8002514:	080026db 	.word	0x080026db
 8002518:	080026db 	.word	0x080026db
 800251c:	080026db 	.word	0x080026db
 8002520:	080025d7 	.word	0x080025d7
 8002524:	080026db 	.word	0x080026db
 8002528:	080026db 	.word	0x080026db
 800252c:	080026db 	.word	0x080026db
 8002530:	08002617 	.word	0x08002617
 8002534:	080026db 	.word	0x080026db
 8002538:	080026db 	.word	0x080026db
 800253c:	080026db 	.word	0x080026db
 8002540:	08002659 	.word	0x08002659
 8002544:	080026db 	.word	0x080026db
 8002548:	080026db 	.word	0x080026db
 800254c:	080026db 	.word	0x080026db
 8002550:	08002699 	.word	0x08002699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa60 	bl	8002a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6999      	ldr	r1, [r3, #24]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	619a      	str	r2, [r3, #24]
      break;
 8002592:	e0a5      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fad0 	bl	8002b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	619a      	str	r2, [r3, #24]
      break;
 80025d4:	e084      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fb39 	bl	8002c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0208 	orr.w	r2, r2, #8
 80025f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0204 	bic.w	r2, r2, #4
 8002600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69d9      	ldr	r1, [r3, #28]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	61da      	str	r2, [r3, #28]
      break;
 8002614:	e064      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fba1 	bl	8002d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69d9      	ldr	r1, [r3, #28]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	021a      	lsls	r2, r3, #8
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	61da      	str	r2, [r3, #28]
      break;
 8002656:	e043      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fc0a 	bl	8002e78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0208 	orr.w	r2, r2, #8
 8002672:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0204 	bic.w	r2, r2, #4
 8002682:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002696:	e023      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fc4e 	bl	8002f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80026d8:	e002      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
      break;
 80026de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop

080026f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_TIM_ConfigClockSource+0x1c>
 800270c:	2302      	movs	r3, #2
 800270e:	e0de      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x1da>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800272e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800273a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	f000 80a9 	beq.w	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002750:	4a61      	ldr	r2, [pc, #388]	@ (80028d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	f200 80ae 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002758:	4a60      	ldr	r2, [pc, #384]	@ (80028dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	f000 80a1 	beq.w	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002760:	4a5e      	ldr	r2, [pc, #376]	@ (80028dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	f200 80a6 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002768:	4a5d      	ldr	r2, [pc, #372]	@ (80028e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800276a:	4293      	cmp	r3, r2
 800276c:	f000 8099 	beq.w	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002770:	4a5b      	ldr	r2, [pc, #364]	@ (80028e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f200 809e 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002778:	4a5a      	ldr	r2, [pc, #360]	@ (80028e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f000 8091 	beq.w	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002780:	4a58      	ldr	r2, [pc, #352]	@ (80028e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f200 8096 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002788:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800278c:	f000 8089 	beq.w	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8002790:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002794:	f200 808e 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8002798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279c:	d03e      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x128>
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a2:	f200 8087 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027aa:	f000 8086 	beq.w	80028ba <HAL_TIM_ConfigClockSource+0x1c6>
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b2:	d87f      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027b4:	2b70      	cmp	r3, #112	@ 0x70
 80027b6:	d01a      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0xfa>
 80027b8:	2b70      	cmp	r3, #112	@ 0x70
 80027ba:	d87b      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027bc:	2b60      	cmp	r3, #96	@ 0x60
 80027be:	d050      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x16e>
 80027c0:	2b60      	cmp	r3, #96	@ 0x60
 80027c2:	d877      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027c4:	2b50      	cmp	r3, #80	@ 0x50
 80027c6:	d03c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x14e>
 80027c8:	2b50      	cmp	r3, #80	@ 0x50
 80027ca:	d873      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027cc:	2b40      	cmp	r3, #64	@ 0x40
 80027ce:	d058      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x18e>
 80027d0:	2b40      	cmp	r3, #64	@ 0x40
 80027d2:	d86f      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027d4:	2b30      	cmp	r3, #48	@ 0x30
 80027d6:	d064      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027d8:	2b30      	cmp	r3, #48	@ 0x30
 80027da:	d86b      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d060      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d867      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05c      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d05a      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80027ec:	e062      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	f000 fc81 	bl	8003104 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	609a      	str	r2, [r3, #8]
      break;
 800281a:	e04f      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	f000 fc6a 	bl	8003104 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800283e:	609a      	str	r2, [r3, #8]
      break;
 8002840:	e03c      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	461a      	mov	r2, r3
 8002850:	f000 fbdc 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2150      	movs	r1, #80	@ 0x50
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fc35 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002860:	e02c      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800286e:	461a      	mov	r2, r3
 8002870:	f000 fbfb 	bl	800306a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2160      	movs	r1, #96	@ 0x60
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fc25 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002880:	e01c      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	461a      	mov	r2, r3
 8002890:	f000 fbbc 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2140      	movs	r1, #64	@ 0x40
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fc15 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 80028a0:	e00c      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f000 fc0c 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 80028b2:	e003      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e000      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80028ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	00100070 	.word	0x00100070
 80028dc:	00100040 	.word	0x00100040
 80028e0:	00100030 	.word	0x00100030
 80028e4:	00100020 	.word	0x00100020

080028e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a42      	ldr	r2, [pc, #264]	@ (8002a04 <TIM_Base_SetConfig+0x11c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00f      	beq.n	8002920 <TIM_Base_SetConfig+0x38>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002906:	d00b      	beq.n	8002920 <TIM_Base_SetConfig+0x38>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a08 <TIM_Base_SetConfig+0x120>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x38>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3e      	ldr	r2, [pc, #248]	@ (8002a0c <TIM_Base_SetConfig+0x124>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x38>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a10 <TIM_Base_SetConfig+0x128>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a33      	ldr	r2, [pc, #204]	@ (8002a04 <TIM_Base_SetConfig+0x11c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01b      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002940:	d017      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <TIM_Base_SetConfig+0x120>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a0c <TIM_Base_SetConfig+0x124>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00f      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2e      	ldr	r2, [pc, #184]	@ (8002a10 <TIM_Base_SetConfig+0x128>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a14 <TIM_Base_SetConfig+0x12c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <TIM_Base_SetConfig+0x130>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <TIM_Base_SetConfig+0x134>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a16      	ldr	r2, [pc, #88]	@ (8002a04 <TIM_Base_SetConfig+0x11c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00f      	beq.n	80029d0 <TIM_Base_SetConfig+0xe8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <TIM_Base_SetConfig+0x128>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00b      	beq.n	80029d0 <TIM_Base_SetConfig+0xe8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a16      	ldr	r2, [pc, #88]	@ (8002a14 <TIM_Base_SetConfig+0x12c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d007      	beq.n	80029d0 <TIM_Base_SetConfig+0xe8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a15      	ldr	r2, [pc, #84]	@ (8002a18 <TIM_Base_SetConfig+0x130>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <TIM_Base_SetConfig+0xe8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a14      	ldr	r2, [pc, #80]	@ (8002a1c <TIM_Base_SetConfig+0x134>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d103      	bne.n	80029d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
  }
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40013400 	.word	0x40013400
 8002a14:	40014000 	.word	0x40014000
 8002a18:	40014400 	.word	0x40014400
 8002a1c:	40014800 	.word	0x40014800

08002a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f023 0201 	bic.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 0302 	bic.w	r3, r3, #2
 8002a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <TIM_OC1_SetConfig+0x10c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00f      	beq.n	8002aa0 <TIM_OC1_SetConfig+0x80>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2b      	ldr	r2, [pc, #172]	@ (8002b30 <TIM_OC1_SetConfig+0x110>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <TIM_OC1_SetConfig+0x80>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b34 <TIM_OC1_SetConfig+0x114>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <TIM_OC1_SetConfig+0x80>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a29      	ldr	r2, [pc, #164]	@ (8002b38 <TIM_OC1_SetConfig+0x118>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <TIM_OC1_SetConfig+0x80>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a28      	ldr	r2, [pc, #160]	@ (8002b3c <TIM_OC1_SetConfig+0x11c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d10c      	bne.n	8002aba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0308 	bic.w	r3, r3, #8
 8002aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <TIM_OC1_SetConfig+0x10c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00f      	beq.n	8002ae2 <TIM_OC1_SetConfig+0xc2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <TIM_OC1_SetConfig+0x110>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <TIM_OC1_SetConfig+0xc2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <TIM_OC1_SetConfig+0x114>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <TIM_OC1_SetConfig+0xc2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <TIM_OC1_SetConfig+0x118>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_OC1_SetConfig+0xc2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <TIM_OC1_SetConfig+0x11c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	621a      	str	r2, [r3, #32]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40013400 	.word	0x40013400
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40014400 	.word	0x40014400
 8002b3c:	40014800 	.word	0x40014800

08002b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 0210 	bic.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0320 	bic.w	r3, r3, #32
 8002b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a28      	ldr	r2, [pc, #160]	@ (8002c40 <TIM_OC2_SetConfig+0x100>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_OC2_SetConfig+0x6c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a27      	ldr	r2, [pc, #156]	@ (8002c44 <TIM_OC2_SetConfig+0x104>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d10d      	bne.n	8002bc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <TIM_OC2_SetConfig+0x100>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00f      	beq.n	8002bf0 <TIM_OC2_SetConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <TIM_OC2_SetConfig+0x104>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_OC2_SetConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a1b      	ldr	r2, [pc, #108]	@ (8002c48 <TIM_OC2_SetConfig+0x108>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_OC2_SetConfig+0xb0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <TIM_OC2_SetConfig+0x10c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_OC2_SetConfig+0xb0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <TIM_OC2_SetConfig+0x110>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d113      	bne.n	8002c18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40013400 	.word	0x40013400
 8002c48:	40014000 	.word	0x40014000
 8002c4c:	40014400 	.word	0x40014400
 8002c50:	40014800 	.word	0x40014800

08002c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	@ (8002d50 <TIM_OC3_SetConfig+0xfc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_OC3_SetConfig+0x6a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a26      	ldr	r2, [pc, #152]	@ (8002d54 <TIM_OC3_SetConfig+0x100>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10d      	bne.n	8002cda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <TIM_OC3_SetConfig+0xfc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00f      	beq.n	8002d02 <TIM_OC3_SetConfig+0xae>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d54 <TIM_OC3_SetConfig+0x100>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_OC3_SetConfig+0xae>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1a      	ldr	r2, [pc, #104]	@ (8002d58 <TIM_OC3_SetConfig+0x104>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_OC3_SetConfig+0xae>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	@ (8002d5c <TIM_OC3_SetConfig+0x108>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_OC3_SetConfig+0xae>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <TIM_OC3_SetConfig+0x10c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d113      	bne.n	8002d2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40013400 	.word	0x40013400
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800

08002d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	031b      	lsls	r3, r3, #12
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a28      	ldr	r2, [pc, #160]	@ (8002e64 <TIM_OC4_SetConfig+0x100>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_OC4_SetConfig+0x6c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a27      	ldr	r2, [pc, #156]	@ (8002e68 <TIM_OC4_SetConfig+0x104>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10d      	bne.n	8002dec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	031b      	lsls	r3, r3, #12
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <TIM_OC4_SetConfig+0x100>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00f      	beq.n	8002e14 <TIM_OC4_SetConfig+0xb0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e68 <TIM_OC4_SetConfig+0x104>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_OC4_SetConfig+0xb0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <TIM_OC4_SetConfig+0x108>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_OC4_SetConfig+0xb0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1a      	ldr	r2, [pc, #104]	@ (8002e70 <TIM_OC4_SetConfig+0x10c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_OC4_SetConfig+0xb0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	@ (8002e74 <TIM_OC4_SetConfig+0x110>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d113      	bne.n	8002e3c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	019b      	lsls	r3, r3, #6
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40013400 	.word	0x40013400
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800

08002e78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <TIM_OC5_SetConfig+0xb4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <TIM_OC5_SetConfig+0x7a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a16      	ldr	r2, [pc, #88]	@ (8002f30 <TIM_OC5_SetConfig+0xb8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_OC5_SetConfig+0x7a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a15      	ldr	r2, [pc, #84]	@ (8002f34 <TIM_OC5_SetConfig+0xbc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_OC5_SetConfig+0x7a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <TIM_OC5_SetConfig+0xc0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_OC5_SetConfig+0x7a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a13      	ldr	r2, [pc, #76]	@ (8002f3c <TIM_OC5_SetConfig+0xc4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d109      	bne.n	8002f06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	621a      	str	r2, [r3, #32]
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40013400 	.word	0x40013400
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <TIM_OC6_SetConfig+0xb8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00f      	beq.n	8002fbc <TIM_OC6_SetConfig+0x7c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <TIM_OC6_SetConfig+0xbc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_OC6_SetConfig+0x7c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a16      	ldr	r2, [pc, #88]	@ (8003000 <TIM_OC6_SetConfig+0xc0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_OC6_SetConfig+0x7c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a15      	ldr	r2, [pc, #84]	@ (8003004 <TIM_OC6_SetConfig+0xc4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_OC6_SetConfig+0x7c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <TIM_OC6_SetConfig+0xc8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d109      	bne.n	8002fd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	029b      	lsls	r3, r3, #10
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40013400 	.word	0x40013400
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800

0800300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 030a 	bic.w	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306a:	b480      	push	{r7}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 0210 	bic.w	r2, r3, #16
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	031b      	lsls	r3, r3, #12
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80030e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f043 0307 	orr.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800311e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	431a      	orrs	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	609a      	str	r2, [r3, #8]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1a      	ldr	r2, [r3, #32]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e065      	b.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d108      	bne.n	80031ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321e:	d013      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a13      	ldr	r2, [pc, #76]	@ (8003290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10c      	bne.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800324e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	4313      	orrs	r3, r2
 8003258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40013400 	.word	0x40013400
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40014000 	.word	0x40014000

08003294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e073      	b.n	8003398 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d11c      	bne.n	8003386 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	051b      	lsls	r3, r3, #20
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40013400 	.word	0x40013400

080033ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e042      	b.n	8003444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fb81 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2224      	movs	r2, #36	@ 0x24
 80033da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 faf4 	bl	80039e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f825 	bl	800344c <UART_SetConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e01b      	b.n	8003444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800341a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800342a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb73 	bl	8003b28 <UART_CheckIdleState>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b08c      	sub	sp, #48	@ 0x30
 8003452:	af00      	add	r7, sp, #0
 8003454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	431a      	orrs	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4bab      	ldr	r3, [pc, #684]	@ (8003728 <UART_SetConfig+0x2dc>)
 800347c:	4013      	ands	r3, r2
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003484:	430b      	orrs	r3, r1
 8003486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4aa0      	ldr	r2, [pc, #640]	@ (800372c <UART_SetConfig+0x2e0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b4:	4313      	orrs	r3, r2
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	f023 010f 	bic.w	r1, r3, #15
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a91      	ldr	r2, [pc, #580]	@ (8003730 <UART_SetConfig+0x2e4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d125      	bne.n	800353c <UART_SetConfig+0xf0>
 80034f0:	4b90      	ldr	r3, [pc, #576]	@ (8003734 <UART_SetConfig+0x2e8>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d81a      	bhi.n	8003534 <UART_SetConfig+0xe8>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <UART_SetConfig+0xb8>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	08003525 	.word	0x08003525
 800350c:	0800351d 	.word	0x0800351d
 8003510:	0800352d 	.word	0x0800352d
 8003514:	2301      	movs	r3, #1
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351a:	e0d6      	b.n	80036ca <UART_SetConfig+0x27e>
 800351c:	2302      	movs	r3, #2
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003522:	e0d2      	b.n	80036ca <UART_SetConfig+0x27e>
 8003524:	2304      	movs	r3, #4
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352a:	e0ce      	b.n	80036ca <UART_SetConfig+0x27e>
 800352c:	2308      	movs	r3, #8
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003532:	e0ca      	b.n	80036ca <UART_SetConfig+0x27e>
 8003534:	2310      	movs	r3, #16
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353a:	e0c6      	b.n	80036ca <UART_SetConfig+0x27e>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7d      	ldr	r2, [pc, #500]	@ (8003738 <UART_SetConfig+0x2ec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d138      	bne.n	80035b8 <UART_SetConfig+0x16c>
 8003546:	4b7b      	ldr	r3, [pc, #492]	@ (8003734 <UART_SetConfig+0x2e8>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d82d      	bhi.n	80035b0 <UART_SetConfig+0x164>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <UART_SetConfig+0x110>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003591 	.word	0x08003591
 8003560:	080035b1 	.word	0x080035b1
 8003564:	080035b1 	.word	0x080035b1
 8003568:	080035b1 	.word	0x080035b1
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080035b1 	.word	0x080035b1
 8003574:	080035b1 	.word	0x080035b1
 8003578:	080035b1 	.word	0x080035b1
 800357c:	08003599 	.word	0x08003599
 8003580:	080035b1 	.word	0x080035b1
 8003584:	080035b1 	.word	0x080035b1
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035a9 	.word	0x080035a9
 8003590:	2300      	movs	r3, #0
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003596:	e098      	b.n	80036ca <UART_SetConfig+0x27e>
 8003598:	2302      	movs	r3, #2
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359e:	e094      	b.n	80036ca <UART_SetConfig+0x27e>
 80035a0:	2304      	movs	r3, #4
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a6:	e090      	b.n	80036ca <UART_SetConfig+0x27e>
 80035a8:	2308      	movs	r3, #8
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ae:	e08c      	b.n	80036ca <UART_SetConfig+0x27e>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b6:	e088      	b.n	80036ca <UART_SetConfig+0x27e>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5f      	ldr	r2, [pc, #380]	@ (800373c <UART_SetConfig+0x2f0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d125      	bne.n	800360e <UART_SetConfig+0x1c2>
 80035c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003734 <UART_SetConfig+0x2e8>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035cc:	2b30      	cmp	r3, #48	@ 0x30
 80035ce:	d016      	beq.n	80035fe <UART_SetConfig+0x1b2>
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d818      	bhi.n	8003606 <UART_SetConfig+0x1ba>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d00a      	beq.n	80035ee <UART_SetConfig+0x1a2>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d814      	bhi.n	8003606 <UART_SetConfig+0x1ba>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <UART_SetConfig+0x19a>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d008      	beq.n	80035f6 <UART_SetConfig+0x1aa>
 80035e4:	e00f      	b.n	8003606 <UART_SetConfig+0x1ba>
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ec:	e06d      	b.n	80036ca <UART_SetConfig+0x27e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f4:	e069      	b.n	80036ca <UART_SetConfig+0x27e>
 80035f6:	2304      	movs	r3, #4
 80035f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fc:	e065      	b.n	80036ca <UART_SetConfig+0x27e>
 80035fe:	2308      	movs	r3, #8
 8003600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003604:	e061      	b.n	80036ca <UART_SetConfig+0x27e>
 8003606:	2310      	movs	r3, #16
 8003608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800360c:	e05d      	b.n	80036ca <UART_SetConfig+0x27e>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4b      	ldr	r2, [pc, #300]	@ (8003740 <UART_SetConfig+0x2f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d125      	bne.n	8003664 <UART_SetConfig+0x218>
 8003618:	4b46      	ldr	r3, [pc, #280]	@ (8003734 <UART_SetConfig+0x2e8>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003622:	2bc0      	cmp	r3, #192	@ 0xc0
 8003624:	d016      	beq.n	8003654 <UART_SetConfig+0x208>
 8003626:	2bc0      	cmp	r3, #192	@ 0xc0
 8003628:	d818      	bhi.n	800365c <UART_SetConfig+0x210>
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d00a      	beq.n	8003644 <UART_SetConfig+0x1f8>
 800362e:	2b80      	cmp	r3, #128	@ 0x80
 8003630:	d814      	bhi.n	800365c <UART_SetConfig+0x210>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <UART_SetConfig+0x1f0>
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d008      	beq.n	800364c <UART_SetConfig+0x200>
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x210>
 800363c:	2300      	movs	r3, #0
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003642:	e042      	b.n	80036ca <UART_SetConfig+0x27e>
 8003644:	2302      	movs	r3, #2
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364a:	e03e      	b.n	80036ca <UART_SetConfig+0x27e>
 800364c:	2304      	movs	r3, #4
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003652:	e03a      	b.n	80036ca <UART_SetConfig+0x27e>
 8003654:	2308      	movs	r3, #8
 8003656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365a:	e036      	b.n	80036ca <UART_SetConfig+0x27e>
 800365c:	2310      	movs	r3, #16
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003662:	e032      	b.n	80036ca <UART_SetConfig+0x27e>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	@ (800372c <UART_SetConfig+0x2e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d12a      	bne.n	80036c4 <UART_SetConfig+0x278>
 800366e:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <UART_SetConfig+0x2e8>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800367c:	d01a      	beq.n	80036b4 <UART_SetConfig+0x268>
 800367e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003682:	d81b      	bhi.n	80036bc <UART_SetConfig+0x270>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003688:	d00c      	beq.n	80036a4 <UART_SetConfig+0x258>
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368e:	d815      	bhi.n	80036bc <UART_SetConfig+0x270>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <UART_SetConfig+0x250>
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003698:	d008      	beq.n	80036ac <UART_SetConfig+0x260>
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x270>
 800369c:	2300      	movs	r3, #0
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a2:	e012      	b.n	80036ca <UART_SetConfig+0x27e>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036aa:	e00e      	b.n	80036ca <UART_SetConfig+0x27e>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b2:	e00a      	b.n	80036ca <UART_SetConfig+0x27e>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ba:	e006      	b.n	80036ca <UART_SetConfig+0x27e>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c2:	e002      	b.n	80036ca <UART_SetConfig+0x27e>
 80036c4:	2310      	movs	r3, #16
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	@ (800372c <UART_SetConfig+0x2e0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f040 80a8 	bne.w	8003826 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d834      	bhi.n	8003748 <UART_SetConfig+0x2fc>
 80036de:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <UART_SetConfig+0x298>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003749 	.word	0x08003749
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003749 	.word	0x08003749
 80036f4:	08003717 	.word	0x08003717
 80036f8:	08003749 	.word	0x08003749
 80036fc:	08003749 	.word	0x08003749
 8003700:	08003749 	.word	0x08003749
 8003704:	0800371f 	.word	0x0800371f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7fe fac6 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800370e:	e021      	b.n	8003754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003710:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <UART_SetConfig+0x2f8>)
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003714:	e01e      	b.n	8003754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003716:	f7fe fa51 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 800371a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800371c:	e01a      	b.n	8003754 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003724:	e016      	b.n	8003754 <UART_SetConfig+0x308>
 8003726:	bf00      	nop
 8003728:	cfff69f3 	.word	0xcfff69f3
 800372c:	40008000 	.word	0x40008000
 8003730:	40013800 	.word	0x40013800
 8003734:	40021000 	.word	0x40021000
 8003738:	40004400 	.word	0x40004400
 800373c:	40004800 	.word	0x40004800
 8003740:	40004c00 	.word	0x40004c00
 8003744:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 812a 	beq.w	80039b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	4a9e      	ldr	r2, [pc, #632]	@ (80039dc <UART_SetConfig+0x590>)
 8003762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003766:	461a      	mov	r2, r3
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	fbb3 f3f2 	udiv	r3, r3, r2
 800376e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	d305      	bcc.n	800378c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	429a      	cmp	r2, r3
 800378a:	d903      	bls.n	8003794 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003792:	e10d      	b.n	80039b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	60fa      	str	r2, [r7, #12]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	4a8e      	ldr	r2, [pc, #568]	@ (80039dc <UART_SetConfig+0x590>)
 80037a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037b6:	f7fc fd2f 	bl	8000218 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	020b      	lsls	r3, r1, #8
 80037cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037d0:	0202      	lsls	r2, r0, #8
 80037d2:	6979      	ldr	r1, [r7, #20]
 80037d4:	6849      	ldr	r1, [r1, #4]
 80037d6:	0849      	lsrs	r1, r1, #1
 80037d8:	2000      	movs	r0, #0
 80037da:	460c      	mov	r4, r1
 80037dc:	4605      	mov	r5, r0
 80037de:	eb12 0804 	adds.w	r8, r2, r4
 80037e2:	eb43 0905 	adc.w	r9, r3, r5
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	469a      	mov	sl, r3
 80037ee:	4693      	mov	fp, r2
 80037f0:	4652      	mov	r2, sl
 80037f2:	465b      	mov	r3, fp
 80037f4:	4640      	mov	r0, r8
 80037f6:	4649      	mov	r1, r9
 80037f8:	f7fc fd0e 	bl	8000218 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800380a:	d308      	bcc.n	800381e <UART_SetConfig+0x3d2>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003812:	d204      	bcs.n	800381e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e0c8      	b.n	80039b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003824:	e0c4      	b.n	80039b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382e:	d167      	bne.n	8003900 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003830:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003834:	2b08      	cmp	r3, #8
 8003836:	d828      	bhi.n	800388a <UART_SetConfig+0x43e>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x3f4>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	0800386d 	.word	0x0800386d
 8003848:	08003875 	.word	0x08003875
 800384c:	0800388b 	.word	0x0800388b
 8003850:	0800387b 	.word	0x0800387b
 8003854:	0800388b 	.word	0x0800388b
 8003858:	0800388b 	.word	0x0800388b
 800385c:	0800388b 	.word	0x0800388b
 8003860:	08003883 	.word	0x08003883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fa18 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800386a:	e014      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800386c:	f7fe fa2a 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8003870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003872:	e010      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003874:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <UART_SetConfig+0x594>)
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003878:	e00d      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe f99f 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003880:	e009      	b.n	8003896 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003888:	e005      	b.n	8003896 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8089 	beq.w	80039b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	4a4e      	ldr	r2, [pc, #312]	@ (80039dc <UART_SetConfig+0x590>)
 80038a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80038b0:	005a      	lsls	r2, r3, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	441a      	add	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	d916      	bls.n	80038f8 <UART_SetConfig+0x4ac>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d0:	d212      	bcs.n	80038f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f023 030f 	bic.w	r3, r3, #15
 80038da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	8bfb      	ldrh	r3, [r7, #30]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	8bfa      	ldrh	r2, [r7, #30]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	e05b      	b.n	80039b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038fe:	e057      	b.n	80039b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003900:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003904:	2b08      	cmp	r3, #8
 8003906:	d828      	bhi.n	800395a <UART_SetConfig+0x50e>
 8003908:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <UART_SetConfig+0x4c4>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003935 	.word	0x08003935
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003945 	.word	0x08003945
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7fe f9b0 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800393a:	e014      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7fe f9c2 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <UART_SetConfig+0x594>)
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003948:	e00d      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe f937 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003950:	e009      	b.n	8003966 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003958:	e005      	b.n	8003966 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003964:	bf00      	nop
    }

    if (pclk != 0U)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d021      	beq.n	80039b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <UART_SetConfig+0x590>)
 8003972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003976:	461a      	mov	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	fbb3 f2f2 	udiv	r2, r3, r2
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	d909      	bls.n	80039aa <UART_SetConfig+0x55e>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d205      	bcs.n	80039aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	e002      	b.n	80039b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3730      	adds	r7, #48	@ 0x30
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	080040b0 	.word	0x080040b0
 80039e0:	00f42400 	.word	0x00f42400

080039e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01a      	beq.n	8003afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae2:	d10a      	bne.n	8003afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b098      	sub	sp, #96	@ 0x60
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b38:	f7fd f8b4 	bl	8000ca4 <HAL_GetTick>
 8003b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d12f      	bne.n	8003bac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f88e 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d022      	beq.n	8003bac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e063      	b.n	8003c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d149      	bne.n	8003c4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f857 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03c      	beq.n	8003c4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	623b      	str	r3, [r7, #32]
   return(result);
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e6      	bne.n	8003bd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c26:	61fa      	str	r2, [r7, #28]
 8003c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	617b      	str	r3, [r7, #20]
   return(result);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e012      	b.n	8003c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3758      	adds	r7, #88	@ 0x58
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	e04f      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d04b      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fd f805 	bl	8000ca4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e04e      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d037      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b80      	cmp	r3, #128	@ 0x80
 8003cc2:	d034      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d031      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d110      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f838 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e029      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d08:	d111      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f81e 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e00f      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d0a0      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b095      	sub	sp, #84	@ 0x54
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e6      	bne.n	8003d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e3      	bne.n	8003d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d118      	bne.n	8003e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0310 	bic.w	r3, r3, #16
 8003de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e6      	bne.n	8003dd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e16:	bf00      	nop
 8003e18:	3754      	adds	r7, #84	@ 0x54
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e027      	b.n	8003e88 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	@ 0x24
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003e66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e02d      	b.n	8003f08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f84f 	bl	8003f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e02d      	b.n	8003f84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	@ 0x24
 8003f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f811 	bl	8003f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fac:	e031      	b.n	8004012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	0e5b      	lsrs	r3, r3, #25
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	0f5b      	lsrs	r3, r3, #29
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fd6:	7bbb      	ldrb	r3, [r7, #14]
 8003fd8:	7b3a      	ldrb	r2, [r7, #12]
 8003fda:	4911      	ldr	r1, [pc, #68]	@ (8004020 <UARTEx_SetNbDataToProcess+0x94>)
 8003fdc:	5c8a      	ldrb	r2, [r1, r2]
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fe2:	7b3a      	ldrb	r2, [r7, #12]
 8003fe4:	490f      	ldr	r1, [pc, #60]	@ (8004024 <UARTEx_SetNbDataToProcess+0x98>)
 8003fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	7b7a      	ldrb	r2, [r7, #13]
 8003ff8:	4909      	ldr	r1, [pc, #36]	@ (8004020 <UARTEx_SetNbDataToProcess+0x94>)
 8003ffa:	5c8a      	ldrb	r2, [r1, r2]
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004000:	7b7a      	ldrb	r2, [r7, #13]
 8004002:	4908      	ldr	r1, [pc, #32]	@ (8004024 <UARTEx_SetNbDataToProcess+0x98>)
 8004004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004006:	fb93 f3f2 	sdiv	r3, r3, r2
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	080040c8 	.word	0x080040c8
 8004024:	080040d0 	.word	0x080040d0

08004028 <memset>:
 8004028:	4402      	add	r2, r0
 800402a:	4603      	mov	r3, r0
 800402c:	4293      	cmp	r3, r2
 800402e:	d100      	bne.n	8004032 <memset+0xa>
 8004030:	4770      	bx	lr
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
 8004036:	e7f9      	b.n	800402c <memset+0x4>

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4d0d      	ldr	r5, [pc, #52]	@ (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	@ (8004074 <__libc_init_array+0x3c>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2600      	movs	r6, #0
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4d0b      	ldr	r5, [pc, #44]	@ (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	@ (800407c <__libc_init_array+0x44>)
 800404c:	f000 f818 	bl	8004080 <_init>
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2600      	movs	r6, #0
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	080040e0 	.word	0x080040e0
 8004074:	080040e0 	.word	0x080040e0
 8004078:	080040e0 	.word	0x080040e0
 800407c:	080040e4 	.word	0x080040e4

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
